
Torqueedo_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f4  080086f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086fc  080086fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000010  08008714  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  08008714  00021bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb2f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003389  00000000  00000000  0003cb6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c8  00000000  00000000  0003fef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  000415c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000033f7  00000000  00000000  00042b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012600  00000000  00000000  00045f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e28f1  00000000  00000000  00058507  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013adf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb8  00000000  00000000  0013ae74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800857c 	.word	0x0800857c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800857c 	.word	0x0800857c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_UART_RxCpltCallback>:
_Bool first_TIM2_ISR = 0;
_Bool Time_over = 0;
uint8_t wait_to_start = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <HAL_UART_RxCpltCallback+0x64>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d120      	bne.n	8000534 <HAL_UART_RxCpltCallback+0x54>
	{

		HAL_UART_Receive_IT(&huart1, RxUART1, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	4914      	ldr	r1, [pc, #80]	; (8000548 <HAL_UART_RxCpltCallback+0x68>)
 80004f6:	4815      	ldr	r0, [pc, #84]	; (800054c <HAL_UART_RxCpltCallback+0x6c>)
 80004f8:	f003 fc20 	bl	8003d3c <HAL_UART_Receive_IT>
		osSemaphoreRelease(UART1_BytesHandle);
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_UART_RxCpltCallback+0x70>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f004 fd8d 	bl	8005020 <osSemaphoreRelease>

		//Timer aktuell nur für besseres Debugging
		if(__HAL_TIM_GET_COUNTER(&htim2) == 0) //Falls Timer nicht aktiv -> aktivieren
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_UART_RxCpltCallback+0x74>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050c:	2b00      	cmp	r3, #0
 800050e:	d107      	bne.n	8000520 <HAL_UART_RxCpltCallback+0x40>
		{
			MX_TIM2_Init();
 8000510:	f000 f962 	bl	80007d8 <MX_TIM2_Init>
			first_TIM2_ISR = 0;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <HAL_UART_RxCpltCallback+0x78>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <HAL_UART_RxCpltCallback+0x74>)
 800051c:	f002 fcba 	bl	8002e94 <HAL_TIM_Base_Start_IT>
		}
		if(__HAL_TIM_GET_COUNTER(&htim2) != 0) //Falls Timer aktiv -> zurücksetzen
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_UART_RxCpltCallback+0x74>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <HAL_UART_RxCpltCallback+0x5c>
		{
			__HAL_TIM_SET_COUNTER(&htim2, 1);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_UART_RxCpltCallback+0x74>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2201      	movs	r2, #1
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else if (huart->Instance == USART3)
	{

	}
}
 8000532:	e003      	b.n	800053c <HAL_UART_RxCpltCallback+0x5c>
	else if (huart->Instance == USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_UART_RxCpltCallback+0x7c>)
 800053a:	4293      	cmp	r3, r2
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	2000002c 	.word	0x2000002c
 800054c:	20001a10 	.word	0x20001a10
 8000550:	20001b60 	.word	0x20001b60
 8000554:	20001a94 	.word	0x20001a94
 8000558:	20000031 	.word	0x20000031
 800055c:	40004400 	.word	0x40004400

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fdca 	bl	80010fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f8bf 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa4d 	bl	8000a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 fa25 	bl	80009c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000576:	f000 f98f 	bl	8000898 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f9bf 	bl	80008fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800057e:	f000 f9ed 	bl	800095c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000582:	f000 f929 	bl	80007d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Start des Programms erst nach mehr als 5 Mikrosekunden Ruhe auf dem Empfangspin des UART1
  uint8_t Text[10] = "Boot";
 8000586:	4a44      	ldr	r2, [pc, #272]	; (8000698 <main+0x138>)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	7019      	strb	r1, [r3, #0]
 8000596:	f107 0311 	add.w	r3, r7, #17
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart2, Text, sizeof(Text),10);
 80005a0:	f107 010c 	add.w	r1, r7, #12
 80005a4:	230a      	movs	r3, #10
 80005a6:	220a      	movs	r2, #10
 80005a8:	483c      	ldr	r0, [pc, #240]	; (800069c <main+0x13c>)
 80005aa:	f003 fb33 	bl	8003c14 <HAL_UART_Transmit>
  for(wait_to_start = 0; wait_to_start < 5; wait_to_start++)
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <main+0x140>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	e025      	b.n	8000602 <main+0xa2>
  {
	  MX_TIM2_Init();
 80005b6:	f000 f90f 	bl	80007d8 <MX_TIM2_Init>
	  HAL_TIM_Base_Start_IT(&htim2);
 80005ba:	483a      	ldr	r0, [pc, #232]	; (80006a4 <main+0x144>)
 80005bc:	f002 fc6a 	bl	8002e94 <HAL_TIM_Base_Start_IT>
	  while(!Time_over)
 80005c0:	e00f      	b.n	80005e2 <main+0x82>
	  {
		  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 f9d5 	bl	8001978 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d106      	bne.n	80005e2 <main+0x82>
		  {
			  __HAL_TIM_SET_COUNTER(&htim2, 1);
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <main+0x144>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2201      	movs	r2, #1
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
			  wait_to_start = 0;
 80005dc:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <main+0x140>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	  while(!Time_over)
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <main+0x148>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e8      	bne.n	80005c2 <main+0x62>
		  }
	  }
	  Time_over = 0;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <main+0x148>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
  for(wait_to_start = 0; wait_to_start < 5; wait_to_start++)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <main+0x140>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <main+0x140>)
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <main+0x140>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b04      	cmp	r3, #4
 8000608:	d9d5      	bls.n	80005b6 <main+0x56>
  }
  //Start UART1 Interrupt
  HAL_UART_Receive_IT(&huart1, RxUART1, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	4927      	ldr	r1, [pc, #156]	; (80006ac <main+0x14c>)
 800060e:	4828      	ldr	r0, [pc, #160]	; (80006b0 <main+0x150>)
 8000610:	f003 fb94 	bl	8003d3c <HAL_UART_Receive_IT>
  uint8_t Text1[10] = "Start";
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <main+0x154>)
 8000616:	463b      	mov	r3, r7
 8000618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	8019      	strh	r1, [r3, #0]
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Text1, sizeof(Text1),10);
 8000628:	4639      	mov	r1, r7
 800062a:	230a      	movs	r3, #10
 800062c:	220a      	movs	r2, #10
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <main+0x13c>)
 8000630:	f003 faf0 	bl	8003c14 <HAL_UART_Transmit>

  //Start UART1 Interrupt zum zweiten mal - nur so funktioniert das empfangen zu 100% (bisher bei mir)
  //-egal ob ich das erste oder das zweite "...Receive_IT" lösche, funktioniert das Empfangen nur selten
  HAL_UART_Receive_IT(&huart1, RxUART1, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	491d      	ldr	r1, [pc, #116]	; (80006ac <main+0x14c>)
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x150>)
 800063a:	f003 fb7f 	bl	8003d3c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063e:	f004 faad 	bl	8004b9c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UART1_Bytes */
  UART1_BytesHandle = osSemaphoreNew(1, 1, &UART1_Bytes_attributes);
 8000642:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <main+0x158>)
 8000644:	2101      	movs	r1, #1
 8000646:	2001      	movs	r0, #1
 8000648:	f004 fbe6 	bl	8004e18 <osSemaphoreNew>
 800064c:	4602      	mov	r2, r0
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0x15c>)
 8000650:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Input_UART1 */
  Input_UART1Handle = osMessageQueueNew (50, sizeof(uint8_t), &Input_UART1_attributes);
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <main+0x160>)
 8000654:	2101      	movs	r1, #1
 8000656:	2032      	movs	r0, #50	; 0x32
 8000658:	f004 fd3a 	bl	80050d0 <osMessageQueueNew>
 800065c:	4602      	mov	r2, r0
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x164>)
 8000660:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <main+0x168>)
 8000664:	2100      	movs	r1, #0
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <main+0x16c>)
 8000668:	f004 fb02 	bl	8004c70 <osThreadNew>
 800066c:	4602      	mov	r2, r0
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <main+0x170>)
 8000670:	601a      	str	r2, [r3, #0]

  /* creation of UART1_to_Queue */
  UART1_to_QueueHandle = osThreadNew(Start_UART1_to_Queue, NULL, &UART1_to_Queue_attributes);
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <main+0x174>)
 8000674:	2100      	movs	r1, #0
 8000676:	4818      	ldr	r0, [pc, #96]	; (80006d8 <main+0x178>)
 8000678:	f004 fafa 	bl	8004c70 <osThreadNew>
 800067c:	4602      	mov	r2, r0
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <main+0x17c>)
 8000680:	601a      	str	r2, [r3, #0]

  /* creation of Queue_to_Motor */
  Queue_to_MotorHandle = osThreadNew(StartQueue_to_Motor, NULL, &Queue_to_Motor_attributes);
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <main+0x180>)
 8000684:	2100      	movs	r1, #0
 8000686:	4817      	ldr	r0, [pc, #92]	; (80006e4 <main+0x184>)
 8000688:	f004 faf2 	bl	8004c70 <osThreadNew>
 800068c:	4602      	mov	r2, r0
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <main+0x188>)
 8000690:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f004 fab7 	bl	8004c04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0x136>
 8000698:	080085d8 	.word	0x080085d8
 800069c:	20001ae0 	.word	0x20001ae0
 80006a0:	20000033 	.word	0x20000033
 80006a4:	20001a94 	.word	0x20001a94
 80006a8:	20000032 	.word	0x20000032
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	20001a10 	.word	0x20001a10
 80006b4:	080085e4 	.word	0x080085e4
 80006b8:	0800869c 	.word	0x0800869c
 80006bc:	20001b60 	.word	0x20001b60
 80006c0:	08008684 	.word	0x08008684
 80006c4:	20001a90 	.word	0x20001a90
 80006c8:	08008618 	.word	0x08008618
 80006cc:	08000a6d 	.word	0x08000a6d
 80006d0:	200018f4 	.word	0x200018f4
 80006d4:	0800863c 	.word	0x0800863c
 80006d8:	08000a7d 	.word	0x08000a7d
 80006dc:	20001a0c 	.word	0x20001a0c
 80006e0:	08008660 	.word	0x08008660
 80006e4:	08000ab1 	.word	0x08000ab1
 80006e8:	20001a08 	.word	0x20001a08

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b0      	sub	sp, #192	; 0xc0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006f6:	2244      	movs	r2, #68	; 0x44
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 ff35 	bl	800856a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2268      	movs	r2, #104	; 0x68
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f007 ff27 	bl	800856a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071c:	2310      	movs	r3, #16
 800071e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000738:	2301      	movs	r3, #1
 800073a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000744:	2328      	movs	r3, #40	; 0x28
 8000746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074a:	2307      	movs	r3, #7
 800074c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f985 	bl	8001a70 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800076c:	f000 fa2e 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000784:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fd90 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000796:	f000 fa19 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800079a:	2307      	movs	r3, #7
 800079c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 ffb5 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b8:	f000 fa08 	bl	8000bcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c0:	f001 f900 	bl	80019c4 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007ca:	f000 f9ff 	bl	8000bcc <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	37c0      	adds	r7, #192	; 0xc0
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* 1 Millisekunde pro Intervall*/
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_TIM2_Init+0xbc>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000806:	2250      	movs	r2, #80	; 0x50
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_TIM2_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_TIM2_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000826:	f002 fbc0 	bl	8002faa <HAL_TIM_OC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 f9cc 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000834:	2108      	movs	r1, #8
 8000836:	4817      	ldr	r0, [pc, #92]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000838:	f002 fc0e 	bl	8003058 <HAL_TIM_OnePulse_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f9c3 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480f      	ldr	r0, [pc, #60]	; (8000894 <MX_TIM2_Init+0xbc>)
 8000856:	f003 f903 	bl	8003a60 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f9b4 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_TIM2_Init+0xbc>)
 800087c:	f002 fd66 	bl	800334c <HAL_TIM_OC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000886:	f000 f9a1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20001a94 	.word	0x20001a94

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_USART1_UART_Init+0x60>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008a4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008e2:	f004 f8e2 	bl	8004aaa <HAL_RS485Ex_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f96e 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20001a10 	.word	0x20001a10
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART2_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000940:	f003 f91a 	bl	8003b78 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f93f 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001ae0 	.word	0x20001ae0
 8000958:	40004400 	.word	0x40004400

0800095c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <MX_USART3_UART_Init+0x60>)
 8000964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000968:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800096c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800099e:	2300      	movs	r3, #0
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 80009a6:	f004 f880 	bl	8004aaa <HAL_RS485Ex_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f90c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20001988 	.word	0x20001988
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6493      	str	r3, [r2, #72]	; 0x48
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2105      	movs	r1, #5
 80009e2:	200d      	movs	r0, #13
 80009e4:	f000 fc7c 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009e8:	200d      	movs	r0, #13
 80009ea:	f000 fc95 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	2010      	movs	r0, #16
 80009f4:	f000 fc74 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009f8:	2010      	movs	r0, #16
 80009fa:	f000 fc8d 	bl	8001318 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f004 f9a1 	bl	8004dbc <osDelay>
 8000a7a:	e7fb      	b.n	8000a74 <StartDefaultTask+0x8>

08000a7c <Start_UART1_to_Queue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART1_to_Queue */
void Start_UART1_to_Queue(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Warte auf neues Byte von UART1 und transferiere es in die MessageQueue*/

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(UART1_BytesHandle, osWaitForever);
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <Start_UART1_to_Queue+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fa61 	bl	8004f54 <osSemaphoreAcquire>

	  osMessageQueuePut(Input_UART1Handle, &RxUART1, 0U, 0);
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <Start_UART1_to_Queue+0x2c>)
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4904      	ldr	r1, [pc, #16]	; (8000aac <Start_UART1_to_Queue+0x30>)
 8000a9c:	f004 fb9e 	bl	80051dc <osMessageQueuePut>
	  osSemaphoreAcquire(UART1_BytesHandle, osWaitForever);
 8000aa0:	e7f0      	b.n	8000a84 <Start_UART1_to_Queue+0x8>
 8000aa2:	bf00      	nop
 8000aa4:	20001b60 	.word	0x20001b60
 8000aa8:	20001a90 	.word	0x20001a90
 8000aac:	2000002c 	.word	0x2000002c

08000ab0 <StartQueue_to_Motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartQueue_to_Motor */
void StartQueue_to_Motor(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartQueue_to_Motor*/
  /* Sobald CPU-Recourcen frei sind und ein neues Byte in der MessageQueue steht, lese es.
   * Schreibe es in einen Buffer
   * Sende bei gefundenem ":" eine Meldung an UART2*/
  uint8_t Buffer[10] = "\0";
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <StartQueue_to_Motor+0x88>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	823b      	strh	r3, [r7, #16]
 8000abe:	f107 0312 	add.w	r3, r7, #18
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
  uint8_t Debug[1] = "\0";
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <StartQueue_to_Motor+0x8c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGetCount(Input_UART1Handle))
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <StartQueue_to_Motor+0x90>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fc68 	bl	80053a8 <osMessageQueueGetCount>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f7      	beq.n	8000ace <StartQueue_to_Motor+0x1e>
	  {
		  for(int i = 1; i <= 9; i++)
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e00e      	b.n	8000b02 <StartQueue_to_Motor+0x52>
		  {
			  Buffer[i-1] = Buffer[i];
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f107 0110 	add.w	r1, r7, #16
 8000aec:	69fa      	ldr	r2, [r7, #28]
 8000aee:	440a      	add	r2, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	f107 0120 	add.w	r1, r7, #32
 8000af6:	440b      	add	r3, r1
 8000af8:	f803 2c10 	strb.w	r2, [r3, #-16]
		  for(int i = 1; i <= 9; i++)
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	3301      	adds	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	dded      	ble.n	8000ae4 <StartQueue_to_Motor+0x34>
		  }
		  osMessageQueueGet(Input_UART1Handle, &Buffer[9], NULL, 0U);
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <StartQueue_to_Motor+0x90>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	f103 0109 	add.w	r1, r3, #9
 8000b14:	2300      	movs	r3, #0
 8000b16:	2200      	movs	r2, #0
 8000b18:	f004 fbd4 	bl	80052c4 <osMessageQueueGet>
		  Debug[0] = Buffer[9];
 8000b1c:	7e7b      	ldrb	r3, [r7, #25]
 8000b1e:	733b      	strb	r3, [r7, #12]
		  if(Buffer[8] == 58)
 8000b20:	7e3b      	ldrb	r3, [r7, #24]
 8000b22:	2b3a      	cmp	r3, #58	; 0x3a
 8000b24:	d1d3      	bne.n	8000ace <StartQueue_to_Motor+0x1e>
		  {
			  HAL_UART_Transmit(&huart2, Debug, sizeof(Debug), 1);
 8000b26:	f107 010c 	add.w	r1, r7, #12
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <StartQueue_to_Motor+0x94>)
 8000b30:	f003 f870 	bl	8003c14 <HAL_UART_Transmit>
	  if(osMessageQueueGetCount(Input_UART1Handle))
 8000b34:	e7cb      	b.n	8000ace <StartQueue_to_Motor+0x1e>
 8000b36:	bf00      	nop
 8000b38:	080085f0 	.word	0x080085f0
 8000b3c:	080085fc 	.word	0x080085fc
 8000b40:	20001a90 	.word	0x20001a90
 8000b44:	20001ae0 	.word	0x20001ae0

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /*Dient aktuell nur zum Start des Controllers und zu Debuggingzwecken für die Übersichtlichkeit auf UART2
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 fae9 	bl	8001130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b66:	d121      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x64>
  {
	 if(!first_TIM2_ISR)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x36>
	 {
		 first_TIM2_ISR = 1;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
		 first_TIM2_ISR = 0;
	 }

  }
  /* USER CODE END Callback 1 */
}
 8000b7c:	e016      	b.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x64>
		 Time_over = 1;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		 uint8_t Text2[1] = "\n";
 8000b84:	230a      	movs	r3, #10
 8000b86:	733b      	strb	r3, [r7, #12]
		 HAL_UART_Transmit(&huart2, Text2, sizeof(Text2),10);
 8000b88:	f107 010c 	add.w	r1, r7, #12
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	2201      	movs	r2, #1
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b92:	f003 f83f 	bl	8003c14 <HAL_UART_Transmit>
		 osMessageQueueReset(Input_UART1Handle);
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 fc36 	bl	800540c <osMessageQueueReset>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ba2:	f002 f9d3 	bl	8002f4c <HAL_TIM_Base_Stop_IT>
		 first_TIM2_ISR = 0;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	20000031 	.word	0x20000031
 8000bbc:	20000032 	.word	0x20000032
 8000bc0:	20001ae0 	.word	0x20001ae0
 8000bc4:	20001a90 	.word	0x20001a90
 8000bc8:	20001a94 	.word	0x20001a94

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x6>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f000 fb65 	bl	80012e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c34:	d113      	bne.n	8000c5e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_TIM_OC_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_TIM_OC_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_TIM_OC_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2105      	movs	r1, #5
 8000c52:	201c      	movs	r0, #28
 8000c54:	f000 fb44 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c58:	201c      	movs	r0, #28
 8000c5a:	f000 fb5d 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a8a      	ldr	r2, [pc, #552]	; (8000eb4 <HAL_UART_MspInit+0x248>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d132      	bne.n	8000cf4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8e:	4b8a      	ldr	r3, [pc, #552]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a89      	ldr	r2, [pc, #548]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9a:	4b87      	ldr	r3, [pc, #540]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b84      	ldr	r3, [pc, #528]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a83      	ldr	r2, [pc, #524]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b81      	ldr	r3, [pc, #516]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000cbe:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 fcd1 	bl	8001684 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	2025      	movs	r0, #37	; 0x25
 8000ce8:	f000 fafa 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cec:	2025      	movs	r0, #37	; 0x25
 8000cee:	f000 fb13 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf2:	e0da      	b.n	8000eaa <HAL_UART_MspInit+0x23e>
  else if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a70      	ldr	r2, [pc, #448]	; (8000ebc <HAL_UART_MspInit+0x250>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d15a      	bne.n	8000db4 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a6d      	ldr	r2, [pc, #436]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a67      	ldr	r2, [pc, #412]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f000 fc9a 	bl	8001684 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d52:	4a5c      	ldr	r2, [pc, #368]	; (8000ec4 <HAL_UART_MspInit+0x258>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d56:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d74:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d7a:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d86:	484e      	ldr	r0, [pc, #312]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d88:	f000 fad4 	bl	8001334 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8000d92:	f7ff ff1b 	bl	8000bcc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_UART_MspInit+0x254>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	2026      	movs	r0, #38	; 0x26
 8000da8:	f000 fa9a 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dac:	2026      	movs	r0, #38	; 0x26
 8000dae:	f000 fab3 	bl	8001318 <HAL_NVIC_EnableIRQ>
}
 8000db2:	e07a      	b.n	8000eaa <HAL_UART_MspInit+0x23e>
  else if(huart->Instance==USART3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <HAL_UART_MspInit+0x25c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d175      	bne.n	8000eaa <HAL_UART_MspInit+0x23e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_UART_MspInit+0x24c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e06:	2310      	movs	r3, #16
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e16:	2307      	movs	r3, #7
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <HAL_UART_MspInit+0x260>)
 8000e22:	f000 fc2f 	bl	8001684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
 8000e26:	f640 0302 	movw	r3, #2050	; 0x802
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <HAL_UART_MspInit+0x264>)
 8000e44:	f000 fc1e 	bl	8001684 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e4a:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <HAL_UART_MspInit+0x26c>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e80:	f000 fa58 	bl	8001334 <HAL_DMA_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x222>
      Error_Handler();
 8000e8a:	f7ff fe9f 	bl	8000bcc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e92:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_UART_MspInit+0x268>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	2027      	movs	r0, #39	; 0x27
 8000ea0:	f000 fa1e 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea4:	2027      	movs	r0, #39	; 0x27
 8000ea6:	f000 fa37 	bl	8001318 <HAL_NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	200018f8 	.word	0x200018f8
 8000ec4:	4002006c 	.word	0x4002006c
 8000ec8:	40004800 	.word	0x40004800
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	20001940 	.word	0x20001940
 8000ed8:	40020030 	.word	0x40020030

08000edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	2019      	movs	r0, #25
 8000ef2:	f000 f9f5 	bl	80012e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 fa0e 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_InitTick+0x9c>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_InitTick+0x9c>)
 8000f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f06:	6613      	str	r3, [r2, #96]	; 0x60
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_InitTick+0x9c>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fb6a 	bl	80025f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f24:	f001 fb52 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8000f28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <HAL_InitTick+0xa0>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	0c9b      	lsrs	r3, r3, #18
 8000f34:	3b01      	subs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_InitTick+0xa8>)
 8000f3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f5a:	f001 ff39 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <HAL_InitTick+0xa4>)
 8000f66:	f001 ff95 	bl	8002e94 <HAL_TIM_Base_Start_IT>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3730      	adds	r7, #48	; 0x30
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	20001b64 	.word	0x20001b64
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA1_Channel3_IRQHandler+0x10>)
 8000fba:	f000 fab4 	bl	8001526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20001940 	.word	0x20001940

08000fc8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Channel6_IRQHandler+0x10>)
 8000fce:	f000 faaa 	bl	8001526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200018f8 	.word	0x200018f8

08000fdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fe2:	f002 f893 	bl	800310c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20001b64 	.word	0x20001b64

08000ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM2_IRQHandler+0x10>)
 8000ff6:	f002 f889 	bl	800310c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20001a94 	.word	0x20001a94

08001004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART1_IRQHandler+0x10>)
 800100a:	f002 ff39 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20001a10 	.word	0x20001a10

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f002 ff2f 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001ae0 	.word	0x20001ae0

0800102c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART3_IRQHandler+0x10>)
 8001032:	f002 ff25 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001988 	.word	0x20001988

08001040 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <SystemInit+0x64>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <SystemInit+0x64>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <SystemInit+0x68>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <SystemInit+0x68>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <SystemInit+0x68>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <SystemInit+0x68>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <SystemInit+0x68>)
 800106c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001070:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001074:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <SystemInit+0x68>)
 8001078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <SystemInit+0x68>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <SystemInit+0x68>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <SystemInit+0x68>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SystemInit+0x64>)
 8001092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001096:	609a      	str	r2, [r3, #8]
#endif
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	40021000 	.word	0x40021000

080010ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff ffc6 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010d0:	f842 3b04 	str.w	r3, [r2], #4

080010d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <LoopForever+0x16>)
	cmp	r2, r3
 80010d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f007 fa17 	bl	800850c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010de:	f7ff fa3f 	bl	8000560 <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80010e8:	08008704 	.word	0x08008704
	ldr	r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010f0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80010f4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80010f8:	20001bf4 	.word	0x20001bf4

080010fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_IRQHandler>

080010fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f8de 	bl	80012ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fee4 	bl	8000edc <HAL_InitTick>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e001      	b.n	8001124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001120:	f7ff fd58 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001124:	79fb      	ldrb	r3, [r7, #7]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	20001bb0 	.word	0x20001bb0

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20001bb0 	.word	0x20001bb0

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff4c 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f2:	f7ff ff61 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 80012f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff ffb1 	bl	8001264 <NVIC_EncodePriority>
 8001302:	4602      	mov	r2, r0
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff80 	bl	8001210 <__NVIC_SetPriority>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff54 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e098      	b.n	8001478 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_DMA_Init+0x150>)
 800134e:	429a      	cmp	r2, r3
 8001350:	d80f      	bhi.n	8001372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_DMA_Init+0x154>)
 800135a:	4413      	add	r3, r2
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_DMA_Init+0x158>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	009a      	lsls	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_DMA_Init+0x15c>)
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
 8001370:	e00e      	b.n	8001390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_DMA_Init+0x160>)
 800137a:	4413      	add	r3, r2
 800137c:	4a43      	ldr	r2, [pc, #268]	; (800148c <HAL_DMA_Init+0x158>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	009a      	lsls	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <HAL_DMA_Init+0x164>)
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ea:	d039      	beq.n	8001460 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_DMA_Init+0x15c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11a      	bne.n	800142c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_DMA_Init+0x168>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 031c 	and.w	r3, r3, #28
 8001402:	210f      	movs	r1, #15
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	4924      	ldr	r1, [pc, #144]	; (800149c <HAL_DMA_Init+0x168>)
 800140c:	4013      	ands	r3, r2
 800140e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_DMA_Init+0x168>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	f003 031c 	and.w	r3, r3, #28
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	491d      	ldr	r1, [pc, #116]	; (800149c <HAL_DMA_Init+0x168>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	e019      	b.n	8001460 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_DMA_Init+0x16c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f003 031c 	and.w	r3, r3, #28
 8001438:	210f      	movs	r1, #15
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	4917      	ldr	r1, [pc, #92]	; (80014a0 <HAL_DMA_Init+0x16c>)
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_DMA_Init+0x16c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 031c 	and.w	r3, r3, #28
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	4911      	ldr	r1, [pc, #68]	; (80014a0 <HAL_DMA_Init+0x16c>)
 800145c:	4313      	orrs	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40020407 	.word	0x40020407
 8001488:	bffdfff8 	.word	0xbffdfff8
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	40020000 	.word	0x40020000
 8001494:	bffdfbf8 	.word	0xbffdfbf8
 8001498:	40020400 	.word	0x40020400
 800149c:	400200a8 	.word	0x400200a8
 80014a0:	400204a8 	.word	0x400204a8

080014a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d005      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e029      	b.n	800151c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f003 021c 	and.w	r2, r3, #28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
    }
  }
  return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f003 031c 	and.w	r3, r3, #28
 8001546:	2204      	movs	r2, #4
 8001548:	409a      	lsls	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d026      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x7a>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d021      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0204 	bic.w	r2, r2, #4
 8001578:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 021c 	and.w	r2, r3, #28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2104      	movs	r1, #4
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	2b00      	cmp	r3, #0
 8001594:	d071      	beq.n	800167a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800159e:	e06c      	b.n	800167a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f003 031c 	and.w	r3, r3, #28
 80015a8:	2202      	movs	r2, #2
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d02e      	beq.n	8001612 <HAL_DMA_IRQHandler+0xec>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d029      	beq.n	8001612 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10b      	bne.n	80015e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020a 	bic.w	r2, r2, #10
 80015da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 021c 	and.w	r2, r3, #28
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2102      	movs	r1, #2
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d038      	beq.n	800167a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001610:	e033      	b.n	800167a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 031c 	and.w	r3, r3, #28
 800161a:	2208      	movs	r2, #8
 800161c:	409a      	lsls	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d02a      	beq.n	800167c <HAL_DMA_IRQHandler+0x156>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d025      	beq.n	800167c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 020e 	bic.w	r2, r2, #14
 800163e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f003 021c 	and.w	r2, r3, #28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800167a:	bf00      	nop
 800167c:	bf00      	nop
}
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	e154      	b.n	800193e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2101      	movs	r1, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8146 	beq.w	8001938 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d00b      	beq.n	80016cc <HAL_GPIO_Init+0x48>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c0:	2b11      	cmp	r3, #17
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 0201 	and.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0xea>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b12      	cmp	r3, #18
 800176c:	d123      	bne.n	80017b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0203 	and.w	r2, r3, #3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a0 	beq.w	8001938 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_GPIO_Init+0x2d8>)
 80017fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fc:	4a57      	ldr	r2, [pc, #348]	; (800195c <HAL_GPIO_Init+0x2d8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6613      	str	r3, [r2, #96]	; 0x60
 8001804:	4b55      	ldr	r3, [pc, #340]	; (800195c <HAL_GPIO_Init+0x2d8>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001810:	4a53      	ldr	r2, [pc, #332]	; (8001960 <HAL_GPIO_Init+0x2dc>)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183a:	d019      	beq.n	8001870 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a49      	ldr	r2, [pc, #292]	; (8001964 <HAL_GPIO_Init+0x2e0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_GPIO_Init+0x2e4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1e4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a47      	ldr	r2, [pc, #284]	; (800196c <HAL_GPIO_Init+0x2e8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a46      	ldr	r2, [pc, #280]	; (8001970 <HAL_GPIO_Init+0x2ec>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1dc>
 800185c:	2304      	movs	r3, #4
 800185e:	e008      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001860:	2307      	movs	r3, #7
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001864:	2303      	movs	r3, #3
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001868:	2302      	movs	r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001870:	2300      	movs	r3, #0
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001882:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x2dc>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001890:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b4:	4a2f      	ldr	r2, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018de:	4a25      	ldr	r2, [pc, #148]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001908:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aea3 	bne.w	8001694 <HAL_GPIO_Init+0x10>
  }
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	48000c00 	.word	0x48000c00
 8001970:	48001000 	.word	0x48001000
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000

080019c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d2:	d130      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d038      	beq.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2232      	movs	r2, #50	; 0x32
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a08:	e002      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d102      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f2      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a30:	d110      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e00f      	b.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d007      	beq.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40007000 	.word	0x40007000
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	431bde83 	.word	0x431bde83

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f000 bc11 	b.w	80022a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a84:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8e:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80e4 	beq.w	8001c6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_RCC_OscConfig+0x4c>
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	f040 808b 	bne.w	8001bca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 8087 	bne.w	8001bca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abc:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x64>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e3e8      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_RCC_OscConfig+0x7e>
 8001ae4:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aec:	e005      	b.n	8001afa <HAL_RCC_OscConfig+0x8a>
 8001aee:	4b86      	ldr	r3, [pc, #536]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d223      	bcs.n	8001b46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fdaa 	bl	800265c <RCC_SetFlashLatencyFromMSIRange>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e3c9      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4977      	ldr	r1, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	4972      	ldr	r1, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e025      	b.n	8001b92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b46:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6f      	ldr	r2, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	496a      	ldr	r1, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b64:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	4965      	ldr	r1, [pc, #404]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fd6a 	bl	800265c <RCC_SetFlashLatencyFromMSIRange>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e389      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b92:	f000 fc6f 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8001b96:	4601      	mov	r1, r0
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a5a      	ldr	r2, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x29c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa21 f303 	lsr.w	r3, r1, r3
 8001bae:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_OscConfig+0x2a0>)
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <HAL_RCC_OscConfig+0x2a4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f990 	bl	8000edc <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d052      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	e36d      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d032      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fabb 	bl	8001158 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be6:	f7ff fab7 	bl	8001158 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e356      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c04:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3f      	ldr	r2, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	493a      	ldr	r1, [pc, #232]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
 8001c36:	e01a      	b.n	8001c6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fa88 	bl	8001158 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fa84 	bl	8001158 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e323      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1dc>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d073      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x21c>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d10e      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d063      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d15f      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e300      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x24c>
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x288>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x270>
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x288>
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa2a 	bl	8001158 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d06:	e010      	b.n	8001d2a <HAL_RCC_OscConfig+0x2ba>
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	080086ac 	.word	0x080086ac
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fa1e 	bl	8001158 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e2bd      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2a:	4baf      	ldr	r3, [pc, #700]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2a8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa0e 	bl	8001158 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fa0a 	bl	8001158 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2a9      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d52:	4ba5      	ldr	r3, [pc, #660]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2d0>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d060      	beq.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x310>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d116      	bne.n	8001dae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d80:	4b99      	ldr	r3, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x328>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e286      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	4990      	ldr	r1, [pc, #576]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	e040      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f9c9 	bl	8001158 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff f9c5 	bl	8001158 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e264      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	497c      	ldr	r1, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e018      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f9a5 	bl	8001158 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff f9a1 	bl	8001158 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e240      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e24:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4a:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f980 	bl	8001158 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f97c 	bl	8001158 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e21b      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ef      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3ec>
 8001e7c:	e01b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f963 	bl	8001158 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f95f 	bl	8001158 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1fe      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a6 	beq.w	8002010 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7ff f926 	bl	8001158 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff f922 	bl	8001158 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1c1      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4d8>
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f46:	e024      	b.n	8001f92 <HAL_RCC_OscConfig+0x522>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d110      	bne.n	8001f72 <HAL_RCC_OscConfig+0x502>
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f70:	e00f      	b.n	8001f92 <HAL_RCC_OscConfig+0x522>
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f8dd 	bl	8001158 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff f8d9 	bl	8001158 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e176      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ed      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x532>
 8001fc6:	e01a      	b.n	8001ffe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f8c6 	bl	8001158 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f8c2 	bl	8001158 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d906      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e15f      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	4baa      	ldr	r3, [pc, #680]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e8      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4ba5      	ldr	r3, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4aa4      	ldr	r2, [pc, #656]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03c      	beq.n	8002096 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01c      	beq.n	800205e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002024:	4b9d      	ldr	r3, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202a:	4a9c      	ldr	r2, [pc, #624]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f890 	bl	8001158 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203c:	f7ff f88c 	bl	8001158 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e12b      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800204e:	4b93      	ldr	r3, [pc, #588]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCC_OscConfig+0x5cc>
 800205c:	e01b      	b.n	8002096 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800205e:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002064:	4a8d      	ldr	r2, [pc, #564]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff f873 	bl	8001158 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002076:	f7ff f86f 	bl	8001158 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e10e      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002088:	4b84      	ldr	r3, [pc, #528]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8102 	beq.w	80022a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	f040 80c5 	bne.w	8002234 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020aa:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0203 	and.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d12c      	bne.n	8002118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	3b01      	subs	r3, #1
 80020ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d123      	bne.n	8002118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d11b      	bne.n	8002118 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d113      	bne.n	8002118 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	3b01      	subs	r3, #1
 80020fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d109      	bne.n	8002118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
 8002112:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d067      	beq.n	80021e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d062      	beq.n	80021e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0bb      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800212e:	4b5b      	ldr	r3, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002138:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213a:	f7ff f80d 	bl	8001158 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff f809 	bl	8001158 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0a8      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x830>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002170:	3a01      	subs	r2, #1
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	0552      	lsls	r2, r2, #21
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218e:	0852      	lsrs	r2, r2, #1
 8002190:	3a01      	subs	r2, #1
 8002192:	0652      	lsls	r2, r2, #25
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219a:	06d2      	lsls	r2, r2, #27
 800219c:	430a      	orrs	r2, r1
 800219e:	493f      	ldr	r1, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a4:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3c      	ldr	r2, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a39      	ldr	r2, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021bc:	f7fe ffcc 	bl	8001158 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe ffc8 	bl	8001158 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e2:	e05f      	b.n	80022a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e05e      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d157      	bne.n	80022a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800220c:	f7fe ffa4 	bl	8001158 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ffa0 	bl	8001158 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e03f      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x7a4>
 8002232:	e037      	b.n	80022a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d02d      	beq.n	8002296 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002258:	f023 0303 	bic.w	r3, r3, #3
 800225c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 8002264:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe ff73 	bl	8001158 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe ff6f 	bl	8001158 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e00e      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_RCC_OscConfig+0x82c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x806>
 8002294:	e006      	b.n	80022a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e005      	b.n	80022a6 <HAL_RCC_OscConfig+0x836>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0c8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4961      	ldr	r1, [pc, #388]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b0      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d04c      	beq.n	800239a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002308:	4b56      	ldr	r3, [pc, #344]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d121      	bne.n	8002358 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e09e      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d115      	bne.n	8002358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e092      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002338:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e086      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e07e      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 0203 	bic.w	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	493f      	ldr	r1, [pc, #252]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236a:	f7fe fef5 	bl	8001158 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002370:	e00a      	b.n	8002388 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7fe fef1 	bl	8001158 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e066      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002388:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 020c 	and.w	r2, r3, #12
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	429a      	cmp	r2, r3
 8002398:	d1eb      	bne.n	8002372 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	492c      	ldr	r1, [pc, #176]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4924      	ldr	r1, [pc, #144]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e036      	b.n	8002456 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4918      	ldr	r1, [pc, #96]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4910      	ldr	r1, [pc, #64]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002426:	f000 f825 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800242a:	4601      	mov	r1, r0
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	fa21 f303 	lsr.w	r3, r1, r3
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fd46 	bl	8000edc <HAL_InitTick>
 8002450:	4603      	mov	r3, r0
 8002452:	72fb      	strb	r3, [r7, #11]

  return status;
 8002454:	7afb      	ldrb	r3, [r7, #11]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
 8002468:	080086ac 	.word	0x080086ac
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d121      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d11e      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e005      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	e004      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d133      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0xa4>
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0xaa>
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_GetSysClockFreq+0x10c>)
 800251a:	617b      	str	r3, [r7, #20]
      break;
 800251c:	e005      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0x110>)
 8002520:	617b      	str	r3, [r7, #20]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	617b      	str	r3, [r7, #20]
      break;
 8002528:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	3301      	adds	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	fb02 f203 	mul.w	r2, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0e5b      	lsrs	r3, r3, #25
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800256a:	69bb      	ldr	r3, [r7, #24]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40021000 	.word	0x40021000
 800257c:	080086c4 	.word	0x080086c4
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	080086bc 	.word	0x080086bc

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d0:	f7ff ffda 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d4:	4601      	mov	r1, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080086bc 	.word	0x080086bc

080025f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	220f      	movs	r2, #15
 8002606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_RCC_GetClockConfig+0x5c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCC_GetClockConfig+0x60>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0207 	and.w	r2, r3, #7
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	40022000 	.word	0x40022000

0800265c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002674:	f7ff f998 	bl	80019a8 <HAL_PWREx_GetVoltageRange>
 8002678:	6178      	str	r0, [r7, #20]
 800267a:	e014      	b.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002694:	f7ff f988 	bl	80019a8 <HAL_PWREx_GetVoltageRange>
 8002698:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d10b      	bne.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d919      	bls.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2ba0      	cmp	r3, #160	; 0xa0
 80026b8:	d902      	bls.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ba:	2302      	movs	r3, #2
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e013      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e010      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d902      	bls.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026cc:	2303      	movs	r3, #3
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e00a      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d102      	bne.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d8:	2302      	movs	r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e004      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d101      	bne.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 0207 	bic.w	r2, r3, #7
 80026f0:	4909      	ldr	r1, [pc, #36]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002724:	2300      	movs	r3, #0
 8002726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002728:	2300      	movs	r3, #0
 800272a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002740:	d005      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002742:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800274c:	e00f      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a5c      	ldr	r2, [pc, #368]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800275a:	e00c      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fa44 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	74fb      	strb	r3, [r7, #19]
      break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	494e      	ldr	r1, [pc, #312]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002792:	e001      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 809e 	beq.w	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027aa:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	4a3f      	ldr	r2, [pc, #252]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fcb6 	bl	8001158 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ee:	e009      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fcb2 	bl	8001158 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	74fb      	strb	r3, [r7, #19]
        break;
 8002802:	e005      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d15a      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01e      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	429a      	cmp	r2, r3
 8002830:	d019      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800285e:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d016      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fc72 	bl	8001158 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002876:	e00b      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fc6e 	bl	8001158 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d902      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	74fb      	strb	r3, [r7, #19]
            break;
 800288e:	e006      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ec      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b2:	4904      	ldr	r1, [pc, #16]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ba:	e009      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d0:	7c7b      	ldrb	r3, [r7, #17]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a9d      	ldr	r2, [pc, #628]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ee:	4b98      	ldr	r3, [pc, #608]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f023 0203 	bic.w	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4994      	ldr	r1, [pc, #592]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002910:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 020c 	bic.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	498c      	ldr	r1, [pc, #560]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002932:	4b87      	ldr	r3, [pc, #540]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	4983      	ldr	r1, [pc, #524]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002954:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	497b      	ldr	r1, [pc, #492]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4972      	ldr	r1, [pc, #456]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002998:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	496a      	ldr	r1, [pc, #424]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	4961      	ldr	r1, [pc, #388]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029dc:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4959      	ldr	r1, [pc, #356]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029fe:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4950      	ldr	r1, [pc, #320]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a20:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	4948      	ldr	r1, [pc, #288]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a48:	f023 0203 	bic.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	493f      	ldr	r1, [pc, #252]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d028      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a64:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	4937      	ldr	r1, [pc, #220]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8e:	60d3      	str	r3, [r2, #12]
 8002a90:	e011      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f8a4 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	491f      	ldr	r1, [pc, #124]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aec:	60d3      	str	r3, [r2, #12]
 8002aee:	e011      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f875 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02b      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a02      	ldr	r2, [pc, #8]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
 8002b4c:	e014      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f843 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01c      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba2:	d10c      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f820 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002be0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000

08002bf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfe:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c0a:	4b70      	ldr	r3, [pc, #448]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10d      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c22:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
       ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d044      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e041      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d00c      	beq.n	8002c5e <RCCEx_PLLSAI1_Config+0x6e>
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d013      	beq.n	8002c70 <RCCEx_PLLSAI1_Config+0x80>
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d120      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4c:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11d      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e01a      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e013      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c70:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10f      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c8c:	e006      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      break;
 8002c92:	e004      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c94:	bf00      	nop
 8002c96:	e002      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	4944      	ldr	r1, [pc, #272]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d17c      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fe fa41 	bl	8001158 <HAL_GetTick>
 8002cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd8:	e009      	b.n	8002cee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cda:	f7fe fa3d 	bl	8001158 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d902      	bls.n	8002cee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	73fb      	strb	r3, [r7, #15]
        break;
 8002cec:	e005      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ef      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d15f      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d110      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0211      	lsls	r1, r2, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68d2      	ldr	r2, [r2, #12]
 8002d1c:	06d2      	lsls	r2, r2, #27
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	492a      	ldr	r1, [pc, #168]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	610b      	str	r3, [r1, #16]
 8002d26:	e027      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d112      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2e:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	0211      	lsls	r1, r2, #8
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6912      	ldr	r2, [r2, #16]
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0552      	lsls	r2, r2, #21
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	491f      	ldr	r1, [pc, #124]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]
 8002d52:	e011      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	0211      	lsls	r1, r2, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6952      	ldr	r2, [r2, #20]
 8002d6a:	0852      	lsrs	r2, r2, #1
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0652      	lsls	r2, r2, #25
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4916      	ldr	r1, [pc, #88]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f9e8 	bl	8001158 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8c:	f7fe f9e4 	bl	8001158 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	4904      	ldr	r1, [pc, #16]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e049      	b.n	8002e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f841 	bl	8002e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fb3a 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d001      	beq.n	8002eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e040      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_TIM_Base_Start_IT+0xa8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x58>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d009      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x58>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_TIM_Base_Start_IT+0xac>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x58>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d115      	bne.n	8002f18 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d015      	beq.n	8002f2a <HAL_TIM_Base_Start_IT+0x96>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d011      	beq.n	8002f2a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	e008      	b.n	8002f2a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40014000 	.word	0x40014000
 8002f48:	00010007 	.word	0x00010007

08002f4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_TIM_Base_Stop_IT+0x48>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	f240 4344 	movw	r3, #1092	; 0x444
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_Base_Stop_IT+0x48>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e049      	b.n	8003050 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fd fe27 	bl	8000c24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 fa4d 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e041      	b.n	80030f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f839 	bl	80030f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 f9f5 	bl	8003488 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d122      	bne.n	8003168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d11b      	bne.n	8003168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0202 	mvn.w	r2, #2
 8003138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f97c 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f96e 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f97f 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0204 	mvn.w	r2, #4
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f952 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f944 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f955 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d122      	bne.n	8003210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d11b      	bne.n	8003210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0208 	mvn.w	r2, #8
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f928 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f91a 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f92b 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b10      	cmp	r3, #16
 800321c:	d122      	bne.n	8003264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b10      	cmp	r3, #16
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0210 	mvn.w	r2, #16
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2208      	movs	r2, #8
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8fe 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8f0 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f901 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0201 	mvn.w	r2, #1
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fc5c 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fc4a 	bl	8003b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d10e      	bne.n	80032ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fc3d 	bl	8003b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d10e      	bne.n	8003316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d107      	bne.n	8003316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800330e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8af 	bl	8003474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b20      	cmp	r3, #32
 8003322:	d10e      	bne.n	8003342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b20      	cmp	r3, #32
 8003330:	d107      	bne.n	8003342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0220 	mvn.w	r2, #32
 800333a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fbfd 	bl	8003b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003362:	2302      	movs	r3, #2
 8003364:	e064      	b.n	8003430 <HAL_TIM_OC_ConfigChannel+0xe4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b14      	cmp	r3, #20
 8003372:	d857      	bhi.n	8003424 <HAL_TIM_OC_ConfigChannel+0xd8>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <HAL_TIM_OC_ConfigChannel+0x30>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033d1 	.word	0x080033d1
 8003380:	08003425 	.word	0x08003425
 8003384:	08003425 	.word	0x08003425
 8003388:	08003425 	.word	0x08003425
 800338c:	080033df 	.word	0x080033df
 8003390:	08003425 	.word	0x08003425
 8003394:	08003425 	.word	0x08003425
 8003398:	08003425 	.word	0x08003425
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	08003425 	.word	0x08003425
 80033a4:	08003425 	.word	0x08003425
 80033a8:	08003425 	.word	0x08003425
 80033ac:	080033fb 	.word	0x080033fb
 80033b0:	08003425 	.word	0x08003425
 80033b4:	08003425 	.word	0x08003425
 80033b8:	08003425 	.word	0x08003425
 80033bc:	08003409 	.word	0x08003409
 80033c0:	08003425 	.word	0x08003425
 80033c4:	08003425 	.word	0x08003425
 80033c8:	08003425 	.word	0x08003425
 80033cc:	08003417 	.word	0x08003417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f8c4 	bl	8003564 <TIM_OC1_SetConfig>
      break;
 80033dc:	e023      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f939 	bl	800365c <TIM_OC2_SetConfig>
      break;
 80033ea:	e01c      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f9ac 	bl	8003750 <TIM_OC3_SetConfig>
      break;
 80033f8:	e015      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa1d 	bl	8003840 <TIM_OC4_SetConfig>
      break;
 8003406:	e00e      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa74 	bl	80038fc <TIM_OC5_SetConfig>
      break;
 8003414:	e007      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fac5 	bl	80039ac <TIM_OC6_SetConfig>
      break;
 8003422:	e000      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8003424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a2e      	ldr	r2, [pc, #184]	; (8003554 <TIM_Base_SetConfig+0xcc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_Base_SetConfig+0x28>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0x28>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <TIM_Base_SetConfig+0xd0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <TIM_Base_SetConfig+0xcc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_Base_SetConfig+0x62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0x62>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <TIM_Base_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x62>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <TIM_Base_SetConfig+0xd4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <TIM_Base_SetConfig+0xd8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <TIM_Base_SetConfig+0xcc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0xb0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <TIM_Base_SetConfig+0xd4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <TIM_Base_SetConfig+0xd8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400

08003564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0302 	bic.w	r3, r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a24      	ldr	r2, [pc, #144]	; (8003650 <TIM_OC1_SetConfig+0xec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_OC1_SetConfig+0x70>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a23      	ldr	r2, [pc, #140]	; (8003654 <TIM_OC1_SetConfig+0xf0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_OC1_SetConfig+0x70>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <TIM_OC1_SetConfig+0xf4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10c      	bne.n	80035ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0308 	bic.w	r3, r3, #8
 80035da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <TIM_OC1_SetConfig+0xec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_OC1_SetConfig+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <TIM_OC1_SetConfig+0xf0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC1_SetConfig+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a15      	ldr	r2, [pc, #84]	; (8003658 <TIM_OC1_SetConfig+0xf4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	621a      	str	r2, [r3, #32]
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400

0800365c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0320 	bic.w	r3, r3, #32
 80036aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <TIM_OC2_SetConfig+0xe8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10d      	bne.n	80036dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a19      	ldr	r2, [pc, #100]	; (8003744 <TIM_OC2_SetConfig+0xe8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_OC2_SetConfig+0x98>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <TIM_OC2_SetConfig+0xec>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_OC2_SetConfig+0x98>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <TIM_OC2_SetConfig+0xf0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d113      	bne.n	800371c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400

08003750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_OC3_SetConfig+0x96>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <TIM_OC3_SetConfig+0xe8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_OC3_SetConfig+0x96>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <TIM_OC3_SetConfig+0xec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d113      	bne.n	800380e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400

08003840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	031b      	lsls	r3, r3, #12
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <TIM_OC4_SetConfig+0xb0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_OC4_SetConfig+0x74>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <TIM_OC4_SetConfig+0xb4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_OC4_SetConfig+0x74>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <TIM_OC4_SetConfig+0xb8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d109      	bne.n	80038c8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400

080038fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003940:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <TIM_OC5_SetConfig+0xa4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_OC5_SetConfig+0x6a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_OC5_SetConfig+0xa8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_OC5_SetConfig+0x6a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <TIM_OC5_SetConfig+0xac>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d109      	bne.n	800397a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	621a      	str	r2, [r3, #32]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400

080039ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	051b      	lsls	r3, r3, #20
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <TIM_OC6_SetConfig+0xa8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC6_SetConfig+0x6c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <TIM_OC6_SetConfig+0xac>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC6_SetConfig+0x6c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_OC6_SetConfig+0xb0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400

08003a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e054      	b.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e040      	b.n	8003c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f866 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fabe 	bl	8004138 <UART_SetConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fd10 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fd97 	bl	8004738 <UART_CheckIdleState>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 8081 	bne.w	8003d30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_Transmit+0x26>
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e079      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Transmit+0x38>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e072      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	; 0x21
 8003c5e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd fa7a 	bl	8001158 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d108      	bne.n	8003c92 <HAL_UART_Transmit+0x7e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e003      	b.n	8003c9a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003ca2:	e02d      	b.n	8003d00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fd87 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e039      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e008      	b.n	8003cee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1cb      	bne.n	8003ca4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fd53 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e005      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 808a 	bne.w	8003e68 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Receive_IT+0x24>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e082      	b.n	8003e6a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Receive_IT+0x36>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e07b      	b.n	8003e6a <HAL_UART_Receive_IT+0x12e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d10e      	bne.n	8003dbe <HAL_UART_Receive_IT+0x82>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_UART_Receive_IT+0x78>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003db2:	e02d      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dbc:	e028      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_UART_Receive_IT+0xa6>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_UART_Receive_IT+0x9c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd6:	e01b      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	227f      	movs	r2, #127	; 0x7f
 8003ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003de0:	e016      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dea:	d10d      	bne.n	8003e08 <HAL_UART_Receive_IT+0xcc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <HAL_UART_Receive_IT+0xc2>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	227f      	movs	r2, #127	; 0x7f
 8003df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	223f      	movs	r2, #63	; 0x3f
 8003e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Receive_IT+0xd4>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2222      	movs	r2, #34	; 0x22
 8003e1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d107      	bne.n	8003e46 <HAL_UART_Receive_IT+0x10a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_UART_Receive_IT+0x13c>)
 8003e42:	661a      	str	r2, [r3, #96]	; 0x60
 8003e44:	e002      	b.n	8003e4c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <HAL_UART_Receive_IT+0x140>)
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003e62:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	08004a01 	.word	0x08004a01
 8003e7c:	08004957 	.word	0x08004957

08003e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d113      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8114 	beq.w	80040f6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
      }
      return;
 8003ed6:	e10e      	b.n	80040f6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80d6 	beq.w	800408c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4b86      	ldr	r3, [pc, #536]	; (8004108 <HAL_UART_IRQHandler+0x288>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80cb 	beq.w	800408c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <HAL_UART_IRQHandler+0x9e>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <HAL_UART_IRQHandler+0xc6>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2202      	movs	r2, #2
 8003f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <HAL_UART_IRQHandler+0xee>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2208      	movs	r2, #8
 8003f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f98:	f043 0208 	orr.w	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00f      	beq.n	8003fca <HAL_UART_IRQHandler+0x14a>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8093 	beq.w	80040fa <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d004      	beq.n	8004016 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004012:	2b00      	cmp	r3, #0
 8004014:	d031      	beq.n	800407a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fc4e 	bl	80048b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d123      	bne.n	8004072 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004046:	4a31      	ldr	r2, [pc, #196]	; (800410c <HAL_UART_IRQHandler+0x28c>)
 8004048:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fa28 	bl	80014a4 <HAL_DMA_Abort_IT>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e00e      	b.n	8004088 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f85a 	bl	8004124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00a      	b.n	8004088 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f856 	bl	8004124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e006      	b.n	8004088 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f852 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004086:	e038      	b.n	80040fa <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	bf00      	nop
    return;
 800408a:	e036      	b.n	80040fa <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_UART_IRQHandler+0x232>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fd64 	bl	8004b78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040b0:	e026      	b.n	8004100 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d017      	beq.n	80040fe <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
    }
    return;
 80040d6:	e012      	b.n	80040fe <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00e      	beq.n	8004100 <HAL_UART_IRQHandler+0x280>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fc19 	bl	8004924 <UART_EndTransmit_IT>
    return;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <HAL_UART_IRQHandler+0x280>
      return;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <HAL_UART_IRQHandler+0x280>
    return;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_UART_IRQHandler+0x280>
    return;
 80040fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	04000120 	.word	0x04000120
 800410c:	080048f9 	.word	0x080048f9

08004110 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800413c:	b088      	sub	sp, #32
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4313      	orrs	r3, r2
 800415c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4ba4      	ldr	r3, [pc, #656]	; (80043f8 <UART_SetConfig+0x2c0>)
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	69f9      	ldr	r1, [r7, #28]
 800416e:	430b      	orrs	r3, r1
 8004170:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a9a      	ldr	r2, [pc, #616]	; (80043fc <UART_SetConfig+0x2c4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a91      	ldr	r2, [pc, #580]	; (8004400 <UART_SetConfig+0x2c8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d121      	bne.n	8004204 <UART_SetConfig+0xcc>
 80041c0:	4b90      	ldr	r3, [pc, #576]	; (8004404 <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d816      	bhi.n	80041fc <UART_SetConfig+0xc4>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x9c>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f1 	.word	0x080041f1
 80041dc:	080041eb 	.word	0x080041eb
 80041e0:	080041f7 	.word	0x080041f7
 80041e4:	2301      	movs	r3, #1
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e0be      	b.n	8004368 <UART_SetConfig+0x230>
 80041ea:	2302      	movs	r3, #2
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e0bb      	b.n	8004368 <UART_SetConfig+0x230>
 80041f0:	2304      	movs	r3, #4
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e0b8      	b.n	8004368 <UART_SetConfig+0x230>
 80041f6:	2308      	movs	r3, #8
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e0b5      	b.n	8004368 <UART_SetConfig+0x230>
 80041fc:	2310      	movs	r3, #16
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	bf00      	nop
 8004202:	e0b1      	b.n	8004368 <UART_SetConfig+0x230>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <UART_SetConfig+0x2d0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d134      	bne.n	8004278 <UART_SetConfig+0x140>
 800420e:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <UART_SetConfig+0x2cc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d829      	bhi.n	8004270 <UART_SetConfig+0x138>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0xec>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004259 	.word	0x08004259
 8004228:	08004271 	.word	0x08004271
 800422c:	08004271 	.word	0x08004271
 8004230:	08004271 	.word	0x08004271
 8004234:	08004265 	.word	0x08004265
 8004238:	08004271 	.word	0x08004271
 800423c:	08004271 	.word	0x08004271
 8004240:	08004271 	.word	0x08004271
 8004244:	0800425f 	.word	0x0800425f
 8004248:	08004271 	.word	0x08004271
 800424c:	08004271 	.word	0x08004271
 8004250:	08004271 	.word	0x08004271
 8004254:	0800426b 	.word	0x0800426b
 8004258:	2300      	movs	r3, #0
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e084      	b.n	8004368 <UART_SetConfig+0x230>
 800425e:	2302      	movs	r3, #2
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e081      	b.n	8004368 <UART_SetConfig+0x230>
 8004264:	2304      	movs	r3, #4
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e07e      	b.n	8004368 <UART_SetConfig+0x230>
 800426a:	2308      	movs	r3, #8
 800426c:	76fb      	strb	r3, [r7, #27]
 800426e:	e07b      	b.n	8004368 <UART_SetConfig+0x230>
 8004270:	2310      	movs	r3, #16
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	bf00      	nop
 8004276:	e077      	b.n	8004368 <UART_SetConfig+0x230>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a63      	ldr	r2, [pc, #396]	; (800440c <UART_SetConfig+0x2d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d120      	bne.n	80042c4 <UART_SetConfig+0x18c>
 8004282:	4b60      	ldr	r3, [pc, #384]	; (8004404 <UART_SetConfig+0x2cc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800428c:	2b10      	cmp	r3, #16
 800428e:	d00f      	beq.n	80042b0 <UART_SetConfig+0x178>
 8004290:	2b10      	cmp	r3, #16
 8004292:	d802      	bhi.n	800429a <UART_SetConfig+0x162>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <UART_SetConfig+0x16c>
 8004298:	e010      	b.n	80042bc <UART_SetConfig+0x184>
 800429a:	2b20      	cmp	r3, #32
 800429c:	d005      	beq.n	80042aa <UART_SetConfig+0x172>
 800429e:	2b30      	cmp	r3, #48	; 0x30
 80042a0:	d009      	beq.n	80042b6 <UART_SetConfig+0x17e>
 80042a2:	e00b      	b.n	80042bc <UART_SetConfig+0x184>
 80042a4:	2300      	movs	r3, #0
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e05e      	b.n	8004368 <UART_SetConfig+0x230>
 80042aa:	2302      	movs	r3, #2
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e05b      	b.n	8004368 <UART_SetConfig+0x230>
 80042b0:	2304      	movs	r3, #4
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e058      	b.n	8004368 <UART_SetConfig+0x230>
 80042b6:	2308      	movs	r3, #8
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e055      	b.n	8004368 <UART_SetConfig+0x230>
 80042bc:	2310      	movs	r3, #16
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	bf00      	nop
 80042c2:	e051      	b.n	8004368 <UART_SetConfig+0x230>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a51      	ldr	r2, [pc, #324]	; (8004410 <UART_SetConfig+0x2d8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d120      	bne.n	8004310 <UART_SetConfig+0x1d8>
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <UART_SetConfig+0x2cc>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d00f      	beq.n	80042fc <UART_SetConfig+0x1c4>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d802      	bhi.n	80042e6 <UART_SetConfig+0x1ae>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0x1b8>
 80042e4:	e010      	b.n	8004308 <UART_SetConfig+0x1d0>
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d005      	beq.n	80042f6 <UART_SetConfig+0x1be>
 80042ea:	2bc0      	cmp	r3, #192	; 0xc0
 80042ec:	d009      	beq.n	8004302 <UART_SetConfig+0x1ca>
 80042ee:	e00b      	b.n	8004308 <UART_SetConfig+0x1d0>
 80042f0:	2300      	movs	r3, #0
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	e038      	b.n	8004368 <UART_SetConfig+0x230>
 80042f6:	2302      	movs	r3, #2
 80042f8:	76fb      	strb	r3, [r7, #27]
 80042fa:	e035      	b.n	8004368 <UART_SetConfig+0x230>
 80042fc:	2304      	movs	r3, #4
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e032      	b.n	8004368 <UART_SetConfig+0x230>
 8004302:	2308      	movs	r3, #8
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e02f      	b.n	8004368 <UART_SetConfig+0x230>
 8004308:	2310      	movs	r3, #16
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	bf00      	nop
 800430e:	e02b      	b.n	8004368 <UART_SetConfig+0x230>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a39      	ldr	r2, [pc, #228]	; (80043fc <UART_SetConfig+0x2c4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d124      	bne.n	8004364 <UART_SetConfig+0x22c>
 800431a:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <UART_SetConfig+0x2cc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	d012      	beq.n	8004350 <UART_SetConfig+0x218>
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d802      	bhi.n	8004336 <UART_SetConfig+0x1fe>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <UART_SetConfig+0x20c>
 8004334:	e012      	b.n	800435c <UART_SetConfig+0x224>
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d006      	beq.n	800434a <UART_SetConfig+0x212>
 800433c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004340:	d009      	beq.n	8004356 <UART_SetConfig+0x21e>
 8004342:	e00b      	b.n	800435c <UART_SetConfig+0x224>
 8004344:	2300      	movs	r3, #0
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e00e      	b.n	8004368 <UART_SetConfig+0x230>
 800434a:	2302      	movs	r3, #2
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e00b      	b.n	8004368 <UART_SetConfig+0x230>
 8004350:	2304      	movs	r3, #4
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e008      	b.n	8004368 <UART_SetConfig+0x230>
 8004356:	2308      	movs	r3, #8
 8004358:	76fb      	strb	r3, [r7, #27]
 800435a:	e005      	b.n	8004368 <UART_SetConfig+0x230>
 800435c:	2310      	movs	r3, #16
 800435e:	76fb      	strb	r3, [r7, #27]
 8004360:	bf00      	nop
 8004362:	e001      	b.n	8004368 <UART_SetConfig+0x230>
 8004364:	2310      	movs	r3, #16
 8004366:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <UART_SetConfig+0x2c4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f040 8085 	bne.w	800447e <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004374:	7efb      	ldrb	r3, [r7, #27]
 8004376:	2b08      	cmp	r3, #8
 8004378:	d823      	bhi.n	80043c2 <UART_SetConfig+0x28a>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x248>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043c3 	.word	0x080043c3
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043b3 	.word	0x080043b3
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043c3 	.word	0x080043c3
 80043a0:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe f8fc 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80043a8:	6178      	str	r0, [r7, #20]
        break;
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <UART_SetConfig+0x2dc>)
 80043ae:	617b      	str	r3, [r7, #20]
        break;
 80043b0:	e00c      	b.n	80043cc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe f85f 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 80043b6:	6178      	str	r0, [r7, #20]
        break;
 80043b8:	e008      	b.n	80043cc <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043be:	617b      	str	r3, [r7, #20]
        break;
 80043c0:	e004      	b.n	80043cc <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	76bb      	strb	r3, [r7, #26]
        break;
 80043ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8102 	beq.w	80045d8 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d305      	bcc.n	80043f0 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d913      	bls.n	8004418 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	76bb      	strb	r3, [r7, #26]
 80043f4:	e0f0      	b.n	80045d8 <UART_SetConfig+0x4a0>
 80043f6:	bf00      	nop
 80043f8:	efff69f3 	.word	0xefff69f3
 80043fc:	40008000 	.word	0x40008000
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	40004c00 	.word	0x40004c00
 8004414:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	0214      	lsls	r4, r2, #8
 800442a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800442e:	020b      	lsls	r3, r1, #8
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6852      	ldr	r2, [r2, #4]
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	4611      	mov	r1, r2
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	eb13 0b01 	adds.w	fp, r3, r1
 8004440:	eb44 0c02 	adc.w	ip, r4, r2
 8004444:	4658      	mov	r0, fp
 8004446:	4661      	mov	r1, ip
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f04f 0400 	mov.w	r4, #0
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	f7fb fec4 	bl	80001e0 <__aeabi_uldivmod>
 8004458:	4603      	mov	r3, r0
 800445a:	460c      	mov	r4, r1
 800445c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004464:	d308      	bcc.n	8004478 <UART_SetConfig+0x340>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446c:	d204      	bcs.n	8004478 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e0af      	b.n	80045d8 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	76bb      	strb	r3, [r7, #26]
 800447c:	e0ac      	b.n	80045d8 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d15b      	bne.n	8004540 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004488:	7efb      	ldrb	r3, [r7, #27]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d827      	bhi.n	80044de <UART_SetConfig+0x3a6>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <UART_SetConfig+0x35c>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044cf 	.word	0x080044cf
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe f872 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80044bc:	6178      	str	r0, [r7, #20]
        break;
 80044be:	e013      	b.n	80044e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fe f884 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80044c4:	6178      	str	r0, [r7, #20]
        break;
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <UART_SetConfig+0x4b8>)
 80044ca:	617b      	str	r3, [r7, #20]
        break;
 80044cc:	e00c      	b.n	80044e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fd ffd1 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 80044d2:	6178      	str	r0, [r7, #20]
        break;
 80044d4:	e008      	b.n	80044e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044da:	617b      	str	r3, [r7, #20]
        break;
 80044dc:	e004      	b.n	80044e8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	76bb      	strb	r3, [r7, #26]
        break;
 80044e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d074      	beq.n	80045d8 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005a      	lsls	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d916      	bls.n	800453a <UART_SetConfig+0x402>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d212      	bcs.n	800453a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f023 030f 	bic.w	r3, r3, #15
 800451c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	b29a      	uxth	r2, r3
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	4313      	orrs	r3, r2
 800452e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	89fa      	ldrh	r2, [r7, #14]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e04e      	b.n	80045d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	76bb      	strb	r3, [r7, #26]
 800453e:	e04b      	b.n	80045d8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004540:	7efb      	ldrb	r3, [r7, #27]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d827      	bhi.n	8004596 <UART_SetConfig+0x45e>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x414>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe f816 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004574:	6178      	str	r0, [r7, #20]
        break;
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe f828 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800457c:	6178      	str	r0, [r7, #20]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <UART_SetConfig+0x4b8>)
 8004582:	617b      	str	r3, [r7, #20]
        break;
 8004584:	e00c      	b.n	80045a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fd ff75 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800458a:	6178      	str	r0, [r7, #20]
        break;
 800458c:	e008      	b.n	80045a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	617b      	str	r3, [r7, #20]
        break;
 8004594:	e004      	b.n	80045a0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	76bb      	strb	r3, [r7, #26]
        break;
 800459e:	bf00      	nop
    }

    if (pclk != 0U)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085a      	lsrs	r2, r3, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	d908      	bls.n	80045d4 <UART_SetConfig+0x49c>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d204      	bcs.n	80045d4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e001      	b.n	80045d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045f0:	00f42400 	.word	0x00f42400

080045f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f2:	d10a      	bne.n	800470a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004746:	f7fc fd07 	bl	8001158 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d10e      	bne.n	8004778 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f82a 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e020      	b.n	80047ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d10e      	bne.n	80047a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f814 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e00a      	b.n	80047ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	e05d      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d059      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047dc:	f7fc fcbc 	bl	8001158 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11b      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004800:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e042      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02b      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004846:	d123      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004860:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e00f      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d092      	beq.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fc04 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fbe1 	bl	8004110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004964:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	d13a      	bne.n	80049e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004974:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	b2d9      	uxtb	r1, r3
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	400a      	ands	r2, r1
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d123      	bne.n	80049f8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049be:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fb fd7f 	bl	80004e0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049e2:	e009      	b.n	80049f8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	8b1b      	ldrh	r3, [r3, #24]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0208 	orr.w	r2, r2, #8
 80049f4:	b292      	uxth	r2, r2
 80049f6:	831a      	strh	r2, [r3, #24]
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a14:	2b22      	cmp	r3, #34	; 0x22
 8004a16:	d13a      	bne.n	8004a8e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a1e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a26:	89ba      	ldrh	r2, [r7, #12]
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	1c9a      	adds	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d123      	bne.n	8004aa2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fb fd2a 	bl	80004e0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a8c:	e009      	b.n	8004aa2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	8b1b      	ldrh	r3, [r3, #24]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0208 	orr.w	r2, r2, #8
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	831a      	strh	r2, [r3, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e056      	b.n	8004b70 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7fc f8ca 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fb22 	bl	8004138 <UART_SetConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e038      	b.n	8004b70 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fd74 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8004b4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fde5 	bl	8004738 <UART_CheckIdleState>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba2:	f3ef 8305 	mrs	r3, IPSR
 8004ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	607b      	str	r3, [r7, #4]
  return(result);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bba:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <osKernelInitialize+0x3a>
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <osKernelInitialize+0x64>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d103      	bne.n	8004bd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004bce:	f06f 0305 	mvn.w	r3, #5
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e00c      	b.n	8004bf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <osKernelInitialize+0x64>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <osKernelInitialize+0x64>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e002      	b.n	8004bf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000034 	.word	0x20000034

08004c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0a:	f3ef 8305 	mrs	r3, IPSR
 8004c0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	607b      	str	r3, [r7, #4]
  return(result);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c22:	f3ef 8311 	mrs	r3, BASEPRI
 8004c26:	603b      	str	r3, [r7, #0]
  return(result);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <osKernelStart+0x3a>
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <osKernelStart+0x68>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c36:	f06f 0305 	mvn.w	r3, #5
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e010      	b.n	8004c60 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <osKernelStart+0x68>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d109      	bne.n	8004c5a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c46:	f7ff ffa1 	bl	8004b8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <osKernelStart+0x68>)
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c50:	f001 fef2 	bl	8006a38 <vTaskStartScheduler>
      stat = osOK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e002      	b.n	8004c60 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000034 	.word	0x20000034

08004c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b090      	sub	sp, #64	; 0x40
 8004c74:	af04      	add	r7, sp, #16
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c80:	f3ef 8305 	mrs	r3, IPSR
 8004c84:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f040 808f 	bne.w	8004dac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osThreadNew+0x3e>
 8004ca6:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <osThreadNew+0x148>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d07e      	beq.n	8004dac <osThreadNew+0x13c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d07b      	beq.n	8004dac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004cb8:	2318      	movs	r3, #24
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d045      	beq.n	8004d58 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <osThreadNew+0x6a>
        name = attr->name;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <osThreadNew+0x90>
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	2b38      	cmp	r3, #56	; 0x38
 8004cf2:	d805      	bhi.n	8004d00 <osThreadNew+0x90>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <osThreadNew+0x94>
        return (NULL);
 8004d00:	2300      	movs	r3, #0
 8004d02:	e054      	b.n	8004dae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <osThreadNew+0xca>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b5b      	cmp	r3, #91	; 0x5b
 8004d22:	d90a      	bls.n	8004d3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <osThreadNew+0xca>
        mem = 1;
 8004d34:	2301      	movs	r3, #1
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	e010      	b.n	8004d5c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <osThreadNew+0xec>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <osThreadNew+0xec>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <osThreadNew+0xec>
          mem = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	e001      	b.n	8004d5c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d110      	bne.n	8004d84 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d6a:	9202      	str	r2, [sp, #8]
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f001 fc8b 	bl	8006694 <xTaskCreateStatic>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e013      	b.n	8004dac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d110      	bne.n	8004dac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f107 0310 	add.w	r3, r7, #16
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f001 fcd3 	bl	8006748 <xTaskCreate>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <osThreadNew+0x13c>
          hTask = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dac:	693b      	ldr	r3, [r7, #16]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3730      	adds	r7, #48	; 0x30
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000034 	.word	0x20000034

08004dbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc4:	f3ef 8305 	mrs	r3, IPSR
 8004dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8004dca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <osDelay+0x3c>
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <osDelay+0x58>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d103      	bne.n	8004df8 <osDelay+0x3c>
    stat = osErrorISR;
 8004df0:	f06f 0305 	mvn.w	r3, #5
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e007      	b.n	8004e08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fde4 	bl	80069d0 <vTaskDelay>
    }
  }

  return (stat);
 8004e08:	697b      	ldr	r3, [r7, #20]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000034 	.word	0x20000034

08004e18 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e28:	f3ef 8305 	mrs	r3, IPSR
 8004e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 8087 	bne.w	8004f44 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e42:	f3ef 8311 	mrs	r3, BASEPRI
 8004e46:	613b      	str	r3, [r7, #16]
  return(result);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <osSemaphoreNew+0x3e>
 8004e4e:	4b40      	ldr	r3, [pc, #256]	; (8004f50 <osSemaphoreNew+0x138>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d076      	beq.n	8004f44 <osSemaphoreNew+0x12c>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d073      	beq.n	8004f44 <osSemaphoreNew+0x12c>
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d86f      	bhi.n	8004f44 <osSemaphoreNew+0x12c>
    mem = -1;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295
 8004e68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d006      	beq.n	8004e86 <osSemaphoreNew+0x6e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b4f      	cmp	r3, #79	; 0x4f
 8004e7e:	d902      	bls.n	8004e86 <osSemaphoreNew+0x6e>
        mem = 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	623b      	str	r3, [r7, #32]
 8004e84:	e00c      	b.n	8004ea0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <osSemaphoreNew+0x88>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <osSemaphoreNew+0x88>
          mem = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e001      	b.n	8004ea0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d04d      	beq.n	8004f44 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d129      	bne.n	8004f02 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10b      	bne.n	8004ecc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	2303      	movs	r3, #3
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f000 fc26 	bl	8005714 <xQueueGenericCreateStatic>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8004eca:	e005      	b.n	8004ed8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004ecc:	2203      	movs	r2, #3
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f000 fc92 	bl	80057fa <xQueueGenericCreate>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <osSemaphoreNew+0x10c>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01f      	beq.n	8004f24 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eec:	f000 fd4e 	bl	800598c <xQueueGenericSend>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d016      	beq.n	8004f24 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8004ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef8:	f001 f9fb 	bl	80062f2 <vQueueDelete>
            hSemaphore = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	e010      	b.n	8004f24 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d108      	bne.n	8004f1a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fcd4 	bl	80058be <xQueueCreateCountingSemaphoreStatic>
 8004f16:	6278      	str	r0, [r7, #36]	; 0x24
 8004f18:	e004      	b.n	8004f24 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fd03 	bl	8005928 <xQueueCreateCountingSemaphore>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <osSemaphoreNew+0x120>
          name = attr->name;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e001      	b.n	8004f3c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f40:	f001 fb22 	bl	8006588 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	; 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000034 	.word	0x20000034

08004f54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004f6c:	f06f 0303 	mvn.w	r3, #3
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e04b      	b.n	800500c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f74:	f3ef 8305 	mrs	r3, IPSR
 8004f78:	617b      	str	r3, [r7, #20]
  return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f80:	f3ef 8310 	mrs	r3, PRIMASK
 8004f84:	613b      	str	r3, [r7, #16]
  return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d026      	beq.n	8004fe6 <osSemaphoreAcquire+0x92>
 8004f98:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <osSemaphoreAcquire+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d122      	bne.n	8004fe6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004fa6:	f06f 0303 	mvn.w	r3, #3
 8004faa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004fac:	e02d      	b.n	800500a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2100      	movs	r1, #0
 8004fba:	69b8      	ldr	r0, [r7, #24]
 8004fbc:	f001 f8e2 	bl	8006184 <xQueueReceiveFromISR>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d003      	beq.n	8004fce <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004fc6:	f06f 0302 	mvn.w	r3, #2
 8004fca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004fcc:	e01d      	b.n	800500a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <osSemaphoreAcquire+0xb6>
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <osSemaphoreAcquire+0xc8>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004fe4:	e011      	b.n	800500a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	69b8      	ldr	r0, [r7, #24]
 8004fea:	f000 ffc3 	bl	8005f74 <xQueueSemaphoreTake>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d00b      	beq.n	800500c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004ffa:	f06f 0301 	mvn.w	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	e004      	b.n	800500c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005002:	f06f 0302 	mvn.w	r3, #2
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e000      	b.n	800500c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800500a:	bf00      	nop
      }
    }
  }

  return (stat);
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000034 	.word	0x20000034
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005036:	f06f 0303 	mvn.w	r3, #3
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e03e      	b.n	80050bc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503e:	f3ef 8305 	mrs	r3, IPSR
 8005042:	617b      	str	r3, [r7, #20]
  return(result);
 8005044:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504a:	f3ef 8310 	mrs	r3, PRIMASK
 800504e:	613b      	str	r3, [r7, #16]
  return(result);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d105      	bne.n	8005062 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005056:	f3ef 8311 	mrs	r3, BASEPRI
 800505a:	60fb      	str	r3, [r7, #12]
  return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01e      	beq.n	80050a0 <osSemaphoreRelease+0x80>
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <osSemaphoreRelease+0xa8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d11a      	bne.n	80050a0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4619      	mov	r1, r3
 8005074:	69b8      	ldr	r0, [r7, #24]
 8005076:	f000 fe17 	bl	8005ca8 <xQueueGiveFromISR>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d003      	beq.n	8005088 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005080:	f06f 0302 	mvn.w	r3, #2
 8005084:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005086:	e018      	b.n	80050ba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <osSemaphoreRelease+0x9a>
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <osSemaphoreRelease+0xac>)
 8005090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800509e:	e00c      	b.n	80050ba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050a0:	2300      	movs	r3, #0
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f000 fc70 	bl	800598c <xQueueGenericSend>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d004      	beq.n	80050bc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80050b2:	f06f 0302 	mvn.w	r3, #2
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e000      	b.n	80050bc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80050ba:	bf00      	nop
    }
  }

  return (stat);
 80050bc:	69fb      	ldr	r3, [r7, #28]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000034 	.word	0x20000034
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e0:	f3ef 8305 	mrs	r3, IPSR
 80050e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d170      	bne.n	80051ce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ec:	f3ef 8310 	mrs	r3, PRIMASK
 80050f0:	617b      	str	r3, [r7, #20]
  return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050f8:	f3ef 8311 	mrs	r3, BASEPRI
 80050fc:	613b      	str	r3, [r7, #16]
  return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <osMessageQueueNew+0x3c>
 8005104:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <osMessageQueueNew+0x108>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d060      	beq.n	80051ce <osMessageQueueNew+0xfe>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d05d      	beq.n	80051ce <osMessageQueueNew+0xfe>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05a      	beq.n	80051ce <osMessageQueueNew+0xfe>
    mem = -1;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d029      	beq.n	8005178 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d012      	beq.n	8005152 <osMessageQueueNew+0x82>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b4f      	cmp	r3, #79	; 0x4f
 8005132:	d90e      	bls.n	8005152 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	429a      	cmp	r2, r3
 800514a:	d302      	bcc.n	8005152 <osMessageQueueNew+0x82>
        mem = 1;
 800514c:	2301      	movs	r3, #1
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	e014      	b.n	800517c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d110      	bne.n	800517c <osMessageQueueNew+0xac>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <osMessageQueueNew+0xac>
          mem = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	e001      	b.n	800517c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10c      	bne.n	800519c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	460b      	mov	r3, r1
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fabe 	bl	8005714 <xQueueGenericCreateStatic>
 8005198:	6278      	str	r0, [r7, #36]	; 0x24
 800519a:	e008      	b.n	80051ae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80051a2:	2200      	movs	r2, #0
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fb27 	bl	80057fa <xQueueGenericCreate>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e001      	b.n	80051c6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ca:	f001 f9dd 	bl	8006588 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000034 	.word	0x20000034

080051dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f4:	f3ef 8305 	mrs	r3, IPSR
 80051f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80051fa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005200:	f3ef 8310 	mrs	r3, PRIMASK
 8005204:	61bb      	str	r3, [r7, #24]
  return(result);
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800520c:	f3ef 8311 	mrs	r3, BASEPRI
 8005210:	617b      	str	r3, [r7, #20]
  return(result);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02c      	beq.n	8005272 <osMessageQueuePut+0x96>
 8005218:	4b28      	ldr	r3, [pc, #160]	; (80052bc <osMessageQueuePut+0xe0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d128      	bne.n	8005272 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <osMessageQueuePut+0x56>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <osMessageQueuePut+0x56>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005232:	f06f 0303 	mvn.w	r3, #3
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005238:	e039      	b.n	80052ae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800523e:	f107 0210 	add.w	r2, r7, #16
 8005242:	2300      	movs	r3, #0
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	6a38      	ldr	r0, [r7, #32]
 8005248:	f000 fc9a 	bl	8005b80 <xQueueGenericSendFromISR>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d003      	beq.n	800525a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005252:	f06f 0302 	mvn.w	r3, #2
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005258:	e029      	b.n	80052ae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d026      	beq.n	80052ae <osMessageQueuePut+0xd2>
 8005260:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <osMessageQueuePut+0xe4>)
 8005262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005270:	e01d      	b.n	80052ae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <osMessageQueuePut+0xa2>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800527e:	f06f 0303 	mvn.w	r3, #3
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	e014      	b.n	80052b0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005286:	2300      	movs	r3, #0
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	6a38      	ldr	r0, [r7, #32]
 800528e:	f000 fb7d 	bl	800598c <xQueueGenericSend>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d00b      	beq.n	80052b0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800529e:	f06f 0301 	mvn.w	r3, #1
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	e004      	b.n	80052b0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80052a6:	f06f 0302 	mvn.w	r3, #2
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
 80052ac:	e000      	b.n	80052b0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000034 	.word	0x20000034
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052da:	f3ef 8305 	mrs	r3, IPSR
 80052de:	61fb      	str	r3, [r7, #28]
  return(result);
 80052e0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052f2:	f3ef 8311 	mrs	r3, BASEPRI
 80052f6:	617b      	str	r3, [r7, #20]
  return(result);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02c      	beq.n	8005358 <osMessageQueueGet+0x94>
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <osMessageQueueGet+0xdc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d128      	bne.n	8005358 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <osMessageQueueGet+0x54>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <osMessageQueueGet+0x54>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005318:	f06f 0303 	mvn.w	r3, #3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800531e:	e038      	b.n	8005392 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005324:	f107 0310 	add.w	r3, r7, #16
 8005328:	461a      	mov	r2, r3
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	6a38      	ldr	r0, [r7, #32]
 800532e:	f000 ff29 	bl	8006184 <xQueueReceiveFromISR>
 8005332:	4603      	mov	r3, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	d003      	beq.n	8005340 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005338:	f06f 0302 	mvn.w	r3, #2
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800533e:	e028      	b.n	8005392 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <osMessageQueueGet+0xce>
 8005346:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <osMessageQueueGet+0xe0>)
 8005348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005356:	e01c      	b.n	8005392 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <osMessageQueueGet+0xa0>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005364:	f06f 0303 	mvn.w	r3, #3
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	e013      	b.n	8005394 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	6a38      	ldr	r0, [r7, #32]
 8005372:	f000 fd23 	bl	8005dbc <xQueueReceive>
 8005376:	4603      	mov	r3, r0
 8005378:	2b01      	cmp	r3, #1
 800537a:	d00b      	beq.n	8005394 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005382:	f06f 0301 	mvn.w	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	e004      	b.n	8005394 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800538a:	f06f 0302 	mvn.w	r3, #2
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
 8005390:	e000      	b.n	8005394 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005392:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005396:	4618      	mov	r0, r3
 8005398:	3728      	adds	r7, #40	; 0x28
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000034 	.word	0x20000034
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e01e      	b.n	80053fe <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c0:	f3ef 8305 	mrs	r3, IPSR
 80053c4:	617b      	str	r3, [r7, #20]
  return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10f      	bne.n	80053ec <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053cc:	f3ef 8310 	mrs	r3, PRIMASK
 80053d0:	613b      	str	r3, [r7, #16]
  return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d8:	f3ef 8311 	mrs	r3, BASEPRI
 80053dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <osMessageQueueGetCount+0x4e>
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <osMessageQueueGetCount+0x60>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d104      	bne.n	80053f6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80053ec:	69b8      	ldr	r0, [r7, #24]
 80053ee:	f000 ff63 	bl	80062b8 <uxQueueMessagesWaitingFromISR>
 80053f2:	61f8      	str	r0, [r7, #28]
 80053f4:	e003      	b.n	80053fe <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80053f6:	69b8      	ldr	r0, [r7, #24]
 80053f8:	f000 ff41 	bl	800627e <uxQueueMessagesWaiting>
 80053fc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80053fe:	69fb      	ldr	r3, [r7, #28]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000034 	.word	0x20000034

0800540c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005418:	f3ef 8305 	mrs	r3, IPSR
 800541c:	617b      	str	r3, [r7, #20]
  return(result);
 800541e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10f      	bne.n	8005444 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005424:	f3ef 8310 	mrs	r3, PRIMASK
 8005428:	613b      	str	r3, [r7, #16]
  return(result);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005430:	f3ef 8311 	mrs	r3, BASEPRI
 8005434:	60fb      	str	r3, [r7, #12]
  return(result);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <osMessageQueueReset+0x40>
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <osMessageQueueReset+0x64>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d103      	bne.n	800544c <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8005444:	f06f 0305 	mvn.w	r3, #5
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e00c      	b.n	8005466 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8005452:	f06f 0303 	mvn.w	r3, #3
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e005      	b.n	8005466 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800545e:	2100      	movs	r1, #0
 8005460:	69b8      	ldr	r0, [r7, #24]
 8005462:	f000 f8ef 	bl	8005644 <xQueueGenericReset>
  }

  return (stat);
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000034 	.word	0x20000034

08005474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <vApplicationGetIdleTaskMemory+0x30>)
 800548a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000038 	.word	0x20000038
 80054a4:	20000094 	.word	0x20000094

080054a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80054b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a06      	ldr	r2, [pc, #24]	; (80054d8 <vApplicationGetTimerTaskMemory+0x30>)
 80054be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20000294 	.word	0x20000294
 80054d8:	200002f0 	.word	0x200002f0

080054dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f103 0208 	add.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f103 0208 	add.w	r2, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f103 0208 	add.w	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d103      	bne.n	800559e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e00c      	b.n	80055b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3308      	adds	r3, #8
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <vListInsert+0x2e>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d2f6      	bcs.n	80055a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6892      	ldr	r2, [r2, #8]
 8005606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d103      	bne.n	8005624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	e7fe      	b.n	800566a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800566c:	f002 fc5e 	bl	8007f2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	441a      	add	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	3b01      	subs	r3, #1
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	22ff      	movs	r2, #255	; 0xff
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d114      	bne.n	80056ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01a      	beq.n	8005700 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3310      	adds	r3, #16
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fc32 	bl	8006f38 <xTaskRemoveFromEventList>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <xQueueGenericReset+0xcc>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e009      	b.n	8005700 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3310      	adds	r3, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fef3 	bl	80054dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3324      	adds	r3, #36	; 0x24
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff feee 	bl	80054dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005700:	f002 fc42 	bl	8007f88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005704:	2301      	movs	r3, #1
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	; 0x38
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <xQueueGenericCreateStatic+0x28>
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
 800573a:	e7fe      	b.n	800573a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <xQueueGenericCreateStatic+0x42>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
 8005754:	e7fe      	b.n	8005754 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <xQueueGenericCreateStatic+0x4e>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <xQueueGenericCreateStatic+0x52>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericCreateStatic+0x54>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <xQueueGenericCreateStatic+0x6c>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	e7fe      	b.n	800577e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <xQueueGenericCreateStatic+0x78>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xQueueGenericCreateStatic+0x7c>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericCreateStatic+0x7e>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <xQueueGenericCreateStatic+0x96>
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057aa:	2350      	movs	r3, #80	; 0x50
 80057ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d009      	beq.n	80057c8 <xQueueGenericCreateStatic+0xb4>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e7fe      	b.n	80057c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f844 	bl	8005878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3730      	adds	r7, #48	; 0x30
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b08a      	sub	sp, #40	; 0x28
 80057fe:	af02      	add	r7, sp, #8
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <xQueueGenericCreate+0x28>
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	e7fe      	b.n	8005820 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e004      	b.n	8005838 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3350      	adds	r3, #80	; 0x50
 800583c:	4618      	mov	r0, r3
 800583e:	f002 fc8f 	bl	8008160 <pvPortMalloc>
 8005842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d011      	beq.n	800586e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3350      	adds	r3, #80	; 0x50
 8005852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800585c:	79fa      	ldrb	r2, [r7, #7]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f805 	bl	8005878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800586e:	69bb      	ldr	r3, [r7, #24]
	}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e002      	b.n	800589a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058a6:	2101      	movs	r1, #1
 80058a8:	69b8      	ldr	r0, [r7, #24]
 80058aa:	f7ff fecb 	bl	8005644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08a      	sub	sp, #40	; 0x28
 80058c2:	af02      	add	r7, sp, #8
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e7fe      	b.n	80058e2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d909      	bls.n	8005900 <xQueueCreateCountingSemaphoreStatic+0x42>
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	e7fe      	b.n	80058fe <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005900:	2302      	movs	r3, #2
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff ff02 	bl	8005714 <xQueueGenericCreateStatic>
 8005910:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800591e:	69fb      	ldr	r3, [r7, #28]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <xQueueCreateCountingSemaphore+0x24>
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	e7fe      	b.n	800594a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d909      	bls.n	8005968 <xQueueCreateCountingSemaphore+0x40>
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	e7fe      	b.n	8005966 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005968:	2202      	movs	r2, #2
 800596a:	2100      	movs	r1, #0
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ff44 	bl	80057fa <xQueueGenericCreate>
 8005972:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005980:	697b      	ldr	r3, [r7, #20]
	}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <xQueueGenericSend+0x30>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ba:	e7fe      	b.n	80059ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <xQueueGenericSend+0x3e>
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueGenericSend+0x42>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueGenericSend+0x44>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <xQueueGenericSend+0x5c>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	e7fe      	b.n	80059e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d103      	bne.n	80059f6 <xQueueGenericSend+0x6a>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <xQueueGenericSend+0x6e>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueGenericSend+0x70>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <xQueueGenericSend+0x88>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	e7fe      	b.n	8005a12 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a14:	f001 fc46 	bl	80072a4 <xTaskGetSchedulerState>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <xQueueGenericSend+0x98>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <xQueueGenericSend+0x9c>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <xQueueGenericSend+0x9e>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <xQueueGenericSend+0xb6>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f002 fa73 	bl	8007f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <xQueueGenericSend+0xcc>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d129      	bne.n	8005aac <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a5e:	f000 fc82 	bl	8006366 <prvCopyDataToQueue>
 8005a62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fa61 	bl	8006f38 <xTaskRemoveFromEventList>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d013      	beq.n	8005aa4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <xQueueGenericSend+0x1f0>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	e00a      	b.n	8005aa4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a94:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <xQueueGenericSend+0x1f0>)
 8005a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005aa4:	f002 fa70 	bl	8007f88 <vPortExitCritical>
				return pdPASS;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e063      	b.n	8005b74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ab2:	f002 fa69 	bl	8007f88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e05c      	b.n	8005b74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 fa99 	bl	8006ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ace:	f002 fa5b 	bl	8007f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ad2:	f001 f815 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ad6:	f002 fa29 	bl	8007f2c <vPortEnterCritical>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d103      	bne.n	8005af0 <xQueueGenericSend+0x164>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x17a>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b06:	f002 fa3f 	bl	8007f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b0a:	1d3a      	adds	r2, r7, #4
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fa88 	bl	8007028 <xTaskCheckForTimeOut>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d124      	bne.n	8005b68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b20:	f000 fd19 	bl	8006556 <prvIsQueueFull>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	3310      	adds	r3, #16
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f9b2 	bl	8006e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3a:	f000 fca4 	bl	8006486 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b3e:	f000 ffed 	bl	8006b1c <xTaskResumeAll>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f47f af7c 	bne.w	8005a42 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <xQueueGenericSend+0x1f0>)
 8005b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	e772      	b.n	8005a42 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b5e:	f000 fc92 	bl	8006486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b62:	f000 ffdb 	bl	8006b1c <xTaskResumeAll>
 8005b66:	e76c      	b.n	8005a42 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6a:	f000 fc8c 	bl	8006486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b6e:	f000 ffd5 	bl	8006b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3738      	adds	r7, #56	; 0x38
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <xQueueGenericSendFromISR+0x2c>
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSendFromISR+0x3a>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSendFromISR+0x3e>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSendFromISR+0x40>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueGenericSendFromISR+0x58>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSendFromISR+0x66>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <xQueueGenericSendFromISR+0x6a>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <xQueueGenericSendFromISR+0x6c>
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <xQueueGenericSendFromISR+0x84>
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e7fe      	b.n	8005c02 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c04:	f002 fa6e 	bl	80080e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c08:	f3ef 8211 	mrs	r2, BASEPRI
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	61ba      	str	r2, [r7, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d302      	bcc.n	8005c36 <xQueueGenericSendFromISR+0xb6>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d12c      	bne.n	8005c90 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c46:	f000 fb8e 	bl	8006366 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d112      	bne.n	8005c7a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d016      	beq.n	8005c8a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 f969 	bl	8006f38 <xTaskRemoveFromEventList>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e007      	b.n	8005c8a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	b25a      	sxtb	r2, r3
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c8e:	e001      	b.n	8005c94 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3738      	adds	r7, #56	; 0x38
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	; 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	e7fe      	b.n	8005cce <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <xQueueGiveFromISR+0x44>
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	e7fe      	b.n	8005cea <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <xQueueGiveFromISR+0x54>
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueGiveFromISR+0x58>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueGiveFromISR+0x5a>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <xQueueGiveFromISR+0x72>
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	e7fe      	b.n	8005d18 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d1a:	f002 f9e3 	bl	80080e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	617a      	str	r2, [r7, #20]
 8005d34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d22b      	bcs.n	8005da2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d112      	bne.n	8005d8c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f8e0 	bl	8006f38 <xTaskRemoveFromEventList>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00e      	beq.n	8005d9c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e007      	b.n	8005d9c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d90:	3301      	adds	r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	b25a      	sxtb	r2, r3
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005da0:	e001      	b.n	8005da6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3738      	adds	r7, #56	; 0x38
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <xQueueReceive+0x2e>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	e7fe      	b.n	8005de8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <xQueueReceive+0x3c>
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <xQueueReceive+0x40>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <xQueueReceive+0x42>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <xQueueReceive+0x5a>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e7fe      	b.n	8005e14 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e16:	f001 fa45 	bl	80072a4 <xTaskGetSchedulerState>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <xQueueReceive+0x6a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <xQueueReceive+0x6e>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <xQueueReceive+0x70>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <xQueueReceive+0x88>
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	e7fe      	b.n	8005e42 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e44:	f002 f872 	bl	8007f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01f      	beq.n	8005e94 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e58:	f000 faef 	bl	800643a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	3310      	adds	r3, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 f861 	bl	8006f38 <xTaskRemoveFromEventList>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <xQueueReceive+0x1b4>)
 8005e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e8c:	f002 f87c 	bl	8007f88 <vPortExitCritical>
				return pdPASS;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e069      	b.n	8005f68 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e9a:	f002 f875 	bl	8007f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e062      	b.n	8005f68 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ea8:	f107 0310 	add.w	r3, r7, #16
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f8a5 	bl	8006ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eb6:	f002 f867 	bl	8007f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eba:	f000 fe21 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ebe:	f002 f835 	bl	8007f2c <vPortEnterCritical>
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d103      	bne.n	8005ed8 <xQueueReceive+0x11c>
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d103      	bne.n	8005eee <xQueueReceive+0x132>
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eee:	f002 f84b 	bl	8007f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ef2:	1d3a      	adds	r2, r7, #4
 8005ef4:	f107 0310 	add.w	r3, r7, #16
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f894 	bl	8007028 <xTaskCheckForTimeOut>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d123      	bne.n	8005f4e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f08:	f000 fb0f 	bl	800652a <prvIsQueueEmpty>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	3324      	adds	r3, #36	; 0x24
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 ffbe 	bl	8006e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f22:	f000 fab0 	bl	8006486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f26:	f000 fdf9 	bl	8006b1c <xTaskResumeAll>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d189      	bne.n	8005e44 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <xQueueReceive+0x1b4>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	e780      	b.n	8005e44 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f44:	f000 fa9f 	bl	8006486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f48:	f000 fde8 	bl	8006b1c <xTaskResumeAll>
 8005f4c:	e77a      	b.n	8005e44 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f50:	f000 fa99 	bl	8006486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f54:	f000 fde2 	bl	8006b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5a:	f000 fae6 	bl	800652a <prvIsQueueEmpty>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f43f af6f 	beq.w	8005e44 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3730      	adds	r7, #48	; 0x30
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <xQueueSemaphoreTake+0x30>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <xQueueSemaphoreTake+0x4c>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e7fe      	b.n	8005fbe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc0:	f001 f970 	bl	80072a4 <xTaskGetSchedulerState>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <xQueueSemaphoreTake+0x5c>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <xQueueSemaphoreTake+0x60>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <xQueueSemaphoreTake+0x62>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <xQueueSemaphoreTake+0x7a>
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e7fe      	b.n	8005fec <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fee:	f001 ff9d 	bl	8007f2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d024      	beq.n	8006048 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	1e5a      	subs	r2, r3, #1
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800600e:	f001 fabb 	bl	8007588 <pvTaskIncrementMutexHeldCount>
 8006012:	4602      	mov	r2, r0
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	3310      	adds	r3, #16
 8006024:	4618      	mov	r0, r3
 8006026:	f000 ff87 	bl	8006f38 <xTaskRemoveFromEventList>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006030:	4b53      	ldr	r3, [pc, #332]	; (8006180 <xQueueSemaphoreTake+0x20c>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006040:	f001 ffa2 	bl	8007f88 <vPortExitCritical>
				return pdPASS;
 8006044:	2301      	movs	r3, #1
 8006046:	e096      	b.n	8006176 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d110      	bne.n	8006070 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <xQueueSemaphoreTake+0xf4>
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e7fe      	b.n	8006066 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006068:	f001 ff8e 	bl	8007f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800606c:	2300      	movs	r3, #0
 800606e:	e082      	b.n	8006176 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	4618      	mov	r0, r3
 800607c:	f000 ffbe 	bl	8006ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006084:	f001 ff80 	bl	8007f88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006088:	f000 fd3a 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800608c:	f001 ff4e 	bl	8007f2c <vPortEnterCritical>
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006096:	b25b      	sxtb	r3, r3
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d103      	bne.n	80060a6 <xQueueSemaphoreTake+0x132>
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d103      	bne.n	80060bc <xQueueSemaphoreTake+0x148>
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060bc:	f001 ff64 	bl	8007f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c0:	463a      	mov	r2, r7
 80060c2:	f107 030c 	add.w	r3, r7, #12
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 ffad 	bl	8007028 <xTaskCheckForTimeOut>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d132      	bne.n	800613a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060d6:	f000 fa28 	bl	800652a <prvIsQueueEmpty>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d026      	beq.n	800612e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80060e8:	f001 ff20 	bl	8007f2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 f8f5 	bl	80072e0 <xTaskPriorityInherit>
 80060f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80060f8:	f001 ff46 	bl	8007f88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fec9 	bl	8006e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800610a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800610c:	f000 f9bb 	bl	8006486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006110:	f000 fd04 	bl	8006b1c <xTaskResumeAll>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	f47f af69 	bne.w	8005fee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <xQueueSemaphoreTake+0x20c>)
 800611e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	e75f      	b.n	8005fee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800612e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006130:	f000 f9a9 	bl	8006486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006134:	f000 fcf2 	bl	8006b1c <xTaskResumeAll>
 8006138:	e759      	b.n	8005fee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800613a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800613c:	f000 f9a3 	bl	8006486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006140:	f000 fcec 	bl	8006b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006146:	f000 f9f0 	bl	800652a <prvIsQueueEmpty>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f43f af4e 	beq.w	8005fee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006158:	f001 fee8 	bl	8007f2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800615c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615e:	f000 f8ea 	bl	8006336 <prvGetDisinheritPriorityAfterTimeout>
 8006162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f001 f98c 	bl	8007488 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006170:	f001 ff0a 	bl	8007f88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006176:	4618      	mov	r0, r3
 8006178:	3738      	adds	r7, #56	; 0x38
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08e      	sub	sp, #56	; 0x38
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <xQueueReceiveFromISR+0x2a>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e7fe      	b.n	80061ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <xQueueReceiveFromISR+0x38>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <xQueueReceiveFromISR+0x3c>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xQueueReceiveFromISR+0x3e>
 80061c0:	2300      	movs	r3, #0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <xQueueReceiveFromISR+0x56>
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	e7fe      	b.n	80061d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061da:	f001 ff83 	bl	80080e4 <vPortValidateInterruptPriority>
	__asm volatile
 80061de:	f3ef 8211 	mrs	r2, BASEPRI
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	61ba      	str	r2, [r7, #24]
 80061f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02f      	beq.n	8006266 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006214:	f000 f911 	bl	800643a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d112      	bne.n	8006250 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fe7e 	bl	8006f38 <xTaskRemoveFromEventList>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e007      	b.n	8006260 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006254:	3301      	adds	r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	b25a      	sxtb	r2, r3
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	e001      	b.n	800626a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006276:	4618      	mov	r0, r3
 8006278:	3738      	adds	r7, #56	; 0x38
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	e7fe      	b.n	800629e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80062a0:	f001 fe44 	bl	8007f2c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 fe6d 	bl	8007f88 <vPortExitCritical>

	return uxReturn;
 80062ae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <uxQueueMessagesWaitingFromISR+0x26>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e7fe      	b.n	80062dc <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80062e4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062e6:	4618      	mov	r0, r3
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <vQueueDelete+0x26>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	e7fe      	b.n	8006316 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f95d 	bl	80065d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 ffdb 	bl	80082e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e001      	b.n	8006358 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006358:	68fb      	ldr	r3, [r7, #12]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10d      	bne.n	80063a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d14d      	bne.n	8006428 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f80d 	bl	80073b0 <xTaskPriorityDisinherit>
 8006396:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]
 800639e:	e043      	b.n	8006428 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d119      	bne.n	80063da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6858      	ldr	r0, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	461a      	mov	r2, r3
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	f002 f8cf 	bl	8008554 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	441a      	add	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d32b      	bcc.n	8006428 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]
 80063d8:	e026      	b.n	8006428 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68d8      	ldr	r0, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	461a      	mov	r2, r3
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	f002 f8b5 	bl	8008554 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	425b      	negs	r3, r3
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d207      	bcs.n	8006416 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	425b      	negs	r3, r3
 8006410:	441a      	add	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d105      	bne.n	8006428 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3b01      	subs	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006430:	697b      	ldr	r3, [r7, #20]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d018      	beq.n	800647e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	d303      	bcc.n	800646e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68d9      	ldr	r1, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	461a      	mov	r2, r3
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f002 f86b 	bl	8008554 <memcpy>
	}
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800648e:	f001 fd4d 	bl	8007f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006498:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800649a:	e011      	b.n	80064c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d012      	beq.n	80064ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fd45 	bl	8006f38 <xTaskRemoveFromEventList>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064b4:	f000 fe18 	bl	80070e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dce9      	bgt.n	800649c <prvUnlockQueue+0x16>
 80064c8:	e000      	b.n	80064cc <prvUnlockQueue+0x46>
					break;
 80064ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	22ff      	movs	r2, #255	; 0xff
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064d4:	f001 fd58 	bl	8007f88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064d8:	f001 fd28 	bl	8007f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064e4:	e011      	b.n	800650a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d012      	beq.n	8006514 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3310      	adds	r3, #16
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fd20 	bl	8006f38 <xTaskRemoveFromEventList>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064fe:	f000 fdf3 	bl	80070e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	3b01      	subs	r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800650a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800650e:	2b00      	cmp	r3, #0
 8006510:	dce9      	bgt.n	80064e6 <prvUnlockQueue+0x60>
 8006512:	e000      	b.n	8006516 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006514:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	22ff      	movs	r2, #255	; 0xff
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800651e:	f001 fd33 	bl	8007f88 <vPortExitCritical>
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006532:	f001 fcfb 	bl	8007f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e001      	b.n	8006548 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006548:	f001 fd1e 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800655e:	f001 fce5 	bl	8007f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	429a      	cmp	r2, r3
 800656c:	d102      	bne.n	8006574 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e001      	b.n	8006578 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006578:	f001 fd06 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 800657c:	68fb      	ldr	r3, [r7, #12]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e014      	b.n	80065c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006598:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <vQueueAddToRegistry+0x4c>)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065a4:	490b      	ldr	r1, [pc, #44]	; (80065d4 <vQueueAddToRegistry+0x4c>)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065ae:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <vQueueAddToRegistry+0x4c>)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	4413      	add	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065ba:	e005      	b.n	80065c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b07      	cmp	r3, #7
 80065c6:	d9e7      	bls.n	8006598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20001bb4 	.word	0x20001bb4

080065d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e016      	b.n	8006614 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <vQueueUnregisterQueue+0x50>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d10b      	bne.n	800660e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <vQueueUnregisterQueue+0x50>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2100      	movs	r1, #0
 80065fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <vQueueUnregisterQueue+0x50>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
				break;
 800660c:	e005      	b.n	800661a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b07      	cmp	r3, #7
 8006618:	d9e5      	bls.n	80065e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20001bb4 	.word	0x20001bb4

0800662c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800663c:	f001 fc76 	bl	8007f2c <vPortEnterCritical>
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006646:	b25b      	sxtb	r3, r3
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d103      	bne.n	8006656 <vQueueWaitForMessageRestricted+0x2a>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800665c:	b25b      	sxtb	r3, r3
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d103      	bne.n	800666c <vQueueWaitForMessageRestricted+0x40>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800666c:	f001 fc8c 	bl	8007f88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3324      	adds	r3, #36	; 0x24
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fc2f 	bl	8006ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f7ff fefd 	bl	8006486 <prvUnlockQueue>
	}
 800668c:	bf00      	nop
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08e      	sub	sp, #56	; 0x38
 8006698:	af04      	add	r7, sp, #16
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d109      	bne.n	80066bc <xTaskCreateStatic+0x28>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	e7fe      	b.n	80066ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <xTaskCreateStatic+0x42>
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e7fe      	b.n	80066d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066d6:	235c      	movs	r3, #92	; 0x5c
 80066d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b5c      	cmp	r3, #92	; 0x5c
 80066de:	d009      	beq.n	80066f4 <xTaskCreateStatic+0x60>
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	e7fe      	b.n	80066f2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01e      	beq.n	800673a <xTaskCreateStatic+0xa6>
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01b      	beq.n	800673a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006714:	2300      	movs	r3, #0
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	9302      	str	r3, [sp, #8]
 800671c:	f107 0314 	add.w	r3, r7, #20
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f850 	bl	80067d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006734:	f000 f8dc 	bl	80068f0 <prvAddNewTaskToReadyList>
 8006738:	e001      	b.n	800673e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800673e:	697b      	ldr	r3, [r7, #20]
	}
 8006740:	4618      	mov	r0, r3
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af04      	add	r7, sp, #16
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fcff 	bl	8008160 <pvPortMalloc>
 8006762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00e      	beq.n	8006788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800676a:	205c      	movs	r0, #92	; 0x5c
 800676c:	f001 fcf8 	bl	8008160 <pvPortMalloc>
 8006770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
 800677e:	e005      	b.n	800678c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006780:	6978      	ldr	r0, [r7, #20]
 8006782:	f001 fdaf 	bl	80082e4 <vPortFree>
 8006786:	e001      	b.n	800678c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d017      	beq.n	80067c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	2300      	movs	r3, #0
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f80e 	bl	80067d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b6:	69f8      	ldr	r0, [r7, #28]
 80067b8:	f000 f89a 	bl	80068f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067bc:	2301      	movs	r3, #1
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e002      	b.n	80067c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067c8:	69bb      	ldr	r3, [r7, #24]
	}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b088      	sub	sp, #32
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	461a      	mov	r2, r3
 80067ea:	21a5      	movs	r1, #165	; 0xa5
 80067ec:	f001 febd 	bl	800856a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067fa:	3b01      	subs	r3, #1
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	2b00      	cmp	r3, #0
 8006812:	d009      	beq.n	8006828 <prvInitialiseNewTask+0x56>
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	e7fe      	b.n	8006826 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01f      	beq.n	800686e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	e012      	b.n	800685a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	7819      	ldrb	r1, [r3, #0]
 800683c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4413      	add	r3, r2
 8006842:	3334      	adds	r3, #52	; 0x34
 8006844:	460a      	mov	r2, r1
 8006846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b0f      	cmp	r3, #15
 800685e:	d9e9      	bls.n	8006834 <prvInitialiseNewTask+0x62>
 8006860:	e000      	b.n	8006864 <prvInitialiseNewTask+0x92>
			{
				break;
 8006862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800686c:	e003      	b.n	8006876 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	2b37      	cmp	r3, #55	; 0x37
 800687a:	d901      	bls.n	8006880 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800687c:	2337      	movs	r3, #55	; 0x37
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006884:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	2200      	movs	r2, #0
 8006890:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	3304      	adds	r3, #4
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fe40 	bl	800551c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	3318      	adds	r3, #24
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fe3b 	bl	800551c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	2200      	movs	r2, #0
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	69b8      	ldr	r0, [r7, #24]
 80068d0:	f001 fa08 	bl	8007ce4 <pxPortInitialiseStack>
 80068d4:	4602      	mov	r2, r0
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e6:	bf00      	nop
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068f8:	f001 fb18 	bl	8007f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068fc:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <prvAddNewTaskToReadyList+0xc4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <prvAddNewTaskToReadyList+0xc4>)
 8006904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006906:	4b2c      	ldr	r3, [pc, #176]	; (80069b8 <prvAddNewTaskToReadyList+0xc8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800690e:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <prvAddNewTaskToReadyList+0xc8>)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006914:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <prvAddNewTaskToReadyList+0xc4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d110      	bne.n	800693e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800691c:	f000 fc08 	bl	8007130 <prvInitialiseTaskLists>
 8006920:	e00d      	b.n	800693e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006922:	4b26      	ldr	r3, [pc, #152]	; (80069bc <prvAddNewTaskToReadyList+0xcc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800692a:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <prvAddNewTaskToReadyList+0xc8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	429a      	cmp	r2, r3
 8006936:	d802      	bhi.n	800693e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <prvAddNewTaskToReadyList+0xc8>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800693e:	4b20      	ldr	r3, [pc, #128]	; (80069c0 <prvAddNewTaskToReadyList+0xd0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <prvAddNewTaskToReadyList+0xd0>)
 8006946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <prvAddNewTaskToReadyList+0xd0>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <prvAddNewTaskToReadyList+0xd4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d903      	bls.n	8006964 <prvAddNewTaskToReadyList+0x74>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <prvAddNewTaskToReadyList+0xd4>)
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <prvAddNewTaskToReadyList+0xd8>)
 8006972:	441a      	add	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7fe fddb 	bl	8005536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006980:	f001 fb02 	bl	8007f88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <prvAddNewTaskToReadyList+0xcc>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <prvAddNewTaskToReadyList+0xc8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	429a      	cmp	r2, r3
 8006998:	d207      	bcs.n	80069aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <prvAddNewTaskToReadyList+0xdc>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000bc4 	.word	0x20000bc4
 80069b8:	200006f0 	.word	0x200006f0
 80069bc:	20000bd0 	.word	0x20000bd0
 80069c0:	20000be0 	.word	0x20000be0
 80069c4:	20000bcc 	.word	0x20000bcc
 80069c8:	200006f4 	.word	0x200006f4
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d016      	beq.n	8006a10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <vTaskDelay+0x60>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <vTaskDelay+0x2e>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	e7fe      	b.n	80069fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80069fe:	f000 f87f 	bl	8006b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a02:	2100      	movs	r1, #0
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fdd3 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a0a:	f000 f887 	bl	8006b1c <xTaskResumeAll>
 8006a0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006a16:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <vTaskDelay+0x64>)
 8006a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000bec 	.word	0x20000bec
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a46:	463a      	mov	r2, r7
 8006a48:	1d39      	adds	r1, r7, #4
 8006a4a:	f107 0308 	add.w	r3, r7, #8
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fd10 	bl	8005474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	460a      	mov	r2, r1
 8006a66:	4920      	ldr	r1, [pc, #128]	; (8006ae8 <vTaskStartScheduler+0xb0>)
 8006a68:	4820      	ldr	r0, [pc, #128]	; (8006aec <vTaskStartScheduler+0xb4>)
 8006a6a:	f7ff fe13 	bl	8006694 <xTaskCreateStatic>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <vTaskStartScheduler+0xb8>)
 8006a72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a74:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <vTaskStartScheduler+0xb8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e001      	b.n	8006a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d102      	bne.n	8006a92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a8c:	f000 fde4 	bl	8007658 <xTimerCreateTimerTask>
 8006a90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d115      	bne.n	8006ac4 <vTaskStartScheduler+0x8c>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <vTaskStartScheduler+0xbc>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <vTaskStartScheduler+0xc0>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <vTaskStartScheduler+0xc4>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006abe:	f001 f997 	bl	8007df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ac2:	e00d      	b.n	8006ae0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d109      	bne.n	8006ae0 <vTaskStartScheduler+0xa8>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e7fe      	b.n	8006ade <vTaskStartScheduler+0xa6>
}
 8006ae0:	bf00      	nop
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08008600 	.word	0x08008600
 8006aec:	08007101 	.word	0x08007101
 8006af0:	20000be8 	.word	0x20000be8
 8006af4:	20000be4 	.word	0x20000be4
 8006af8:	20000bd0 	.word	0x20000bd0
 8006afc:	20000bc8 	.word	0x20000bc8

08006b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000bec 	.word	0x20000bec

08006b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b2a:	4b41      	ldr	r3, [pc, #260]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <xTaskResumeAll+0x2a>
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	e7fe      	b.n	8006b44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b46:	f001 f9f1 	bl	8007f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a37      	ldr	r2, [pc, #220]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <xTaskResumeAll+0x114>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d162      	bne.n	8006c22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b5c:	4b35      	ldr	r3, [pc, #212]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05e      	beq.n	8006c22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b64:	e02f      	b.n	8006bc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <xTaskResumeAll+0x11c>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fd3c 	bl	80055f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fd37 	bl	80055f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <xTaskResumeAll+0x120>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <xTaskResumeAll+0x7a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <xTaskResumeAll+0x120>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <xTaskResumeAll+0x124>)
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fcc2 	bl	8005536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	4b23      	ldr	r3, [pc, #140]	; (8006c44 <xTaskResumeAll+0x128>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006bc0:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <xTaskResumeAll+0x11c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1cb      	bne.n	8006b66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bd4:	f000 fb46 	bl	8007264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bd8:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <xTaskResumeAll+0x130>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006be4:	f000 f846 	bl	8006c74 <xTaskIncrementTick>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006bee:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f1      	bne.n	8006be4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <xTaskResumeAll+0x130>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c12:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <xTaskResumeAll+0x134>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 f9b1 	bl	8007f88 <vPortExitCritical>

	return xAlreadyYielded;
 8006c26:	68bb      	ldr	r3, [r7, #8]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000bec 	.word	0x20000bec
 8006c34:	20000bc4 	.word	0x20000bc4
 8006c38:	20000b84 	.word	0x20000b84
 8006c3c:	20000bcc 	.word	0x20000bcc
 8006c40:	200006f4 	.word	0x200006f4
 8006c44:	200006f0 	.word	0x200006f0
 8006c48:	20000bd8 	.word	0x20000bd8
 8006c4c:	20000bd4 	.word	0x20000bd4
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <xTaskGetTickCount+0x1c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c60:	687b      	ldr	r3, [r7, #4]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000bc8 	.word	0x20000bc8

08006c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7e:	4b4e      	ldr	r3, [pc, #312]	; (8006db8 <xTaskIncrementTick+0x144>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8088 	bne.w	8006d98 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c88:	4b4c      	ldr	r3, [pc, #304]	; (8006dbc <xTaskIncrementTick+0x148>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c90:	4a4a      	ldr	r2, [pc, #296]	; (8006dbc <xTaskIncrementTick+0x148>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11f      	bne.n	8006cdc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c9c:	4b48      	ldr	r3, [pc, #288]	; (8006dc0 <xTaskIncrementTick+0x14c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <xTaskIncrementTick+0x46>
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	e7fe      	b.n	8006cb8 <xTaskIncrementTick+0x44>
 8006cba:	4b41      	ldr	r3, [pc, #260]	; (8006dc0 <xTaskIncrementTick+0x14c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <xTaskIncrementTick+0x150>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3e      	ldr	r2, [pc, #248]	; (8006dc0 <xTaskIncrementTick+0x14c>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4a3e      	ldr	r2, [pc, #248]	; (8006dc4 <xTaskIncrementTick+0x150>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b3e      	ldr	r3, [pc, #248]	; (8006dc8 <xTaskIncrementTick+0x154>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a3c      	ldr	r2, [pc, #240]	; (8006dc8 <xTaskIncrementTick+0x154>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	f000 fac4 	bl	8007264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cdc:	4b3b      	ldr	r3, [pc, #236]	; (8006dcc <xTaskIncrementTick+0x158>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d349      	bcc.n	8006d7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <xTaskIncrementTick+0x14c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <xTaskIncrementTick+0x158>)
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf6:	601a      	str	r2, [r3, #0]
					break;
 8006cf8:	e03f      	b.n	8006d7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <xTaskIncrementTick+0x14c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d203      	bcs.n	8006d1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d12:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <xTaskIncrementTick+0x158>)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d18:	e02f      	b.n	8006d7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fc66 	bl	80055f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3318      	adds	r3, #24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fc5d 	bl	80055f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <xTaskIncrementTick+0x15c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d903      	bls.n	8006d4a <xTaskIncrementTick+0xd6>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	4a22      	ldr	r2, [pc, #136]	; (8006dd0 <xTaskIncrementTick+0x15c>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <xTaskIncrementTick+0x160>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fe fbe8 	bl	8005536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4b1b      	ldr	r3, [pc, #108]	; (8006dd8 <xTaskIncrementTick+0x164>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d3b8      	bcc.n	8006ce6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d78:	e7b5      	b.n	8006ce6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d7a:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <xTaskIncrementTick+0x164>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	4914      	ldr	r1, [pc, #80]	; (8006dd4 <xTaskIncrementTick+0x160>)
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d907      	bls.n	8006da2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e004      	b.n	8006da2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d98:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <xTaskIncrementTick+0x168>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <xTaskIncrementTick+0x168>)
 8006da0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <xTaskIncrementTick+0x16c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000bec 	.word	0x20000bec
 8006dbc:	20000bc8 	.word	0x20000bc8
 8006dc0:	20000b7c 	.word	0x20000b7c
 8006dc4:	20000b80 	.word	0x20000b80
 8006dc8:	20000bdc 	.word	0x20000bdc
 8006dcc:	20000be4 	.word	0x20000be4
 8006dd0:	20000bcc 	.word	0x20000bcc
 8006dd4:	200006f4 	.word	0x200006f4
 8006dd8:	200006f0 	.word	0x200006f0
 8006ddc:	20000bd4 	.word	0x20000bd4
 8006de0:	20000bd8 	.word	0x20000bd8

08006de4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dea:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <vTaskSwitchContext+0xa4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006df2:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <vTaskSwitchContext+0xa8>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006df8:	e040      	b.n	8006e7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <vTaskSwitchContext+0xa8>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e00:	4b23      	ldr	r3, [pc, #140]	; (8006e90 <vTaskSwitchContext+0xac>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e00f      	b.n	8006e28 <vTaskSwitchContext+0x44>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <vTaskSwitchContext+0x3e>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	e7fe      	b.n	8006e20 <vTaskSwitchContext+0x3c>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	491a      	ldr	r1, [pc, #104]	; (8006e94 <vTaskSwitchContext+0xb0>)
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0e5      	beq.n	8006e08 <vTaskSwitchContext+0x24>
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <vTaskSwitchContext+0xb0>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d104      	bne.n	8006e6c <vTaskSwitchContext+0x88>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <vTaskSwitchContext+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vTaskSwitchContext+0xac>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6013      	str	r3, [r2, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	20000bec 	.word	0x20000bec
 8006e8c:	20000bd8 	.word	0x20000bd8
 8006e90:	20000bcc 	.word	0x20000bcc
 8006e94:	200006f4 	.word	0x200006f4
 8006e98:	200006f0 	.word	0x200006f0

08006e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <vTaskPlaceOnEventList+0x24>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e7fe      	b.n	8006ebe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vTaskPlaceOnEventList+0x44>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3318      	adds	r3, #24
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fe fb58 	bl	800557e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ece:	2101      	movs	r1, #1
 8006ed0:	6838      	ldr	r0, [r7, #0]
 8006ed2:	f000 fb6d 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200006f0 	.word	0x200006f0

08006ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <vTaskPlaceOnEventListRestricted+0x26>
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e7fe      	b.n	8006f08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <vTaskPlaceOnEventListRestricted+0x50>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4619      	mov	r1, r3
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7fe fb0f 	bl	8005536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fb42 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
	}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200006f0 	.word	0x200006f0

08006f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <xTaskRemoveFromEventList+0x2a>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e7fe      	b.n	8006f60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3318      	adds	r3, #24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fb42 	bl	80055f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f6c:	4b1d      	ldr	r3, [pc, #116]	; (8006fe4 <xTaskRemoveFromEventList+0xac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11d      	bne.n	8006fb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fb39 	bl	80055f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <xTaskRemoveFromEventList+0xb0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d903      	bls.n	8006f92 <xTaskRemoveFromEventList+0x5a>
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <xTaskRemoveFromEventList+0xb0>)
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a13      	ldr	r2, [pc, #76]	; (8006fec <xTaskRemoveFromEventList+0xb4>)
 8006fa0:	441a      	add	r2, r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fe fac4 	bl	8005536 <vListInsertEnd>
 8006fae:	e005      	b.n	8006fbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3318      	adds	r3, #24
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	480e      	ldr	r0, [pc, #56]	; (8006ff0 <xTaskRemoveFromEventList+0xb8>)
 8006fb8:	f7fe fabd 	bl	8005536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <xTaskRemoveFromEventList+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d905      	bls.n	8006fd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <xTaskRemoveFromEventList+0xc0>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e001      	b.n	8006fda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fda:	697b      	ldr	r3, [r7, #20]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000bec 	.word	0x20000bec
 8006fe8:	20000bcc 	.word	0x20000bcc
 8006fec:	200006f4 	.word	0x200006f4
 8006ff0:	20000b84 	.word	0x20000b84
 8006ff4:	200006f0 	.word	0x200006f0
 8006ff8:	20000bd8 	.word	0x20000bd8

08006ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <vTaskInternalSetTimeOutState+0x24>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <vTaskInternalSetTimeOutState+0x28>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000bdc 	.word	0x20000bdc
 8007024:	20000bc8 	.word	0x20000bc8

08007028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <xTaskCheckForTimeOut+0x24>
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	e7fe      	b.n	800704a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <xTaskCheckForTimeOut+0x3e>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e7fe      	b.n	8007064 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007066:	f000 ff61 	bl	8007f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800706a:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <xTaskCheckForTimeOut+0xb8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d102      	bne.n	800708a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007084:	2300      	movs	r3, #0
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	e023      	b.n	80070d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <xTaskCheckForTimeOut+0xbc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d007      	beq.n	80070a6 <xTaskCheckForTimeOut+0x7e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	e015      	b.n	80070d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d20b      	bcs.n	80070c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1ad2      	subs	r2, r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ff9d 	bl	8006ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	e004      	b.n	80070d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ce:	2301      	movs	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070d2:	f000 ff59 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 80070d6:	69fb      	ldr	r3, [r7, #28]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000bc8 	.word	0x20000bc8
 80070e4:	20000bdc 	.word	0x20000bdc

080070e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070ec:	4b03      	ldr	r3, [pc, #12]	; (80070fc <vTaskMissedYield+0x14>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
}
 80070f2:	bf00      	nop
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20000bd8 	.word	0x20000bd8

08007100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007108:	f000 f852 	bl	80071b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <prvIdleTask+0x28>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d9f9      	bls.n	8007108 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <prvIdleTask+0x2c>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007124:	e7f0      	b.n	8007108 <prvIdleTask+0x8>
 8007126:	bf00      	nop
 8007128:	200006f4 	.word	0x200006f4
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007136:	2300      	movs	r3, #0
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	e00c      	b.n	8007156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4a12      	ldr	r2, [pc, #72]	; (8007190 <prvInitialiseTaskLists+0x60>)
 8007148:	4413      	add	r3, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe f9c6 	bl	80054dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3301      	adds	r3, #1
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b37      	cmp	r3, #55	; 0x37
 800715a:	d9ef      	bls.n	800713c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800715c:	480d      	ldr	r0, [pc, #52]	; (8007194 <prvInitialiseTaskLists+0x64>)
 800715e:	f7fe f9bd 	bl	80054dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007162:	480d      	ldr	r0, [pc, #52]	; (8007198 <prvInitialiseTaskLists+0x68>)
 8007164:	f7fe f9ba 	bl	80054dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007168:	480c      	ldr	r0, [pc, #48]	; (800719c <prvInitialiseTaskLists+0x6c>)
 800716a:	f7fe f9b7 	bl	80054dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800716e:	480c      	ldr	r0, [pc, #48]	; (80071a0 <prvInitialiseTaskLists+0x70>)
 8007170:	f7fe f9b4 	bl	80054dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007174:	480b      	ldr	r0, [pc, #44]	; (80071a4 <prvInitialiseTaskLists+0x74>)
 8007176:	f7fe f9b1 	bl	80054dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <prvInitialiseTaskLists+0x78>)
 800717c:	4a05      	ldr	r2, [pc, #20]	; (8007194 <prvInitialiseTaskLists+0x64>)
 800717e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <prvInitialiseTaskLists+0x7c>)
 8007182:	4a05      	ldr	r2, [pc, #20]	; (8007198 <prvInitialiseTaskLists+0x68>)
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200006f4 	.word	0x200006f4
 8007194:	20000b54 	.word	0x20000b54
 8007198:	20000b68 	.word	0x20000b68
 800719c:	20000b84 	.word	0x20000b84
 80071a0:	20000b98 	.word	0x20000b98
 80071a4:	20000bb0 	.word	0x20000bb0
 80071a8:	20000b7c 	.word	0x20000b7c
 80071ac:	20000b80 	.word	0x20000b80

080071b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071b6:	e019      	b.n	80071ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b8:	f000 feb8 	bl	8007f2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <prvCheckTasksWaitingTermination+0x4c>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fa11 	bl	80055f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <prvCheckTasksWaitingTermination+0x50>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <prvCheckTasksWaitingTermination+0x50>)
 80071d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvCheckTasksWaitingTermination+0x54>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <prvCheckTasksWaitingTermination+0x54>)
 80071e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071e2:	f000 fed1 	bl	8007f88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f80e 	bl	8007208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <prvCheckTasksWaitingTermination+0x54>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e1      	bne.n	80071b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000b98 	.word	0x20000b98
 8007200:	20000bc4 	.word	0x20000bc4
 8007204:	20000bac 	.word	0x20000bac

08007208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007216:	2b00      	cmp	r3, #0
 8007218:	d108      	bne.n	800722c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f860 	bl	80082e4 <vPortFree>
				vPortFree( pxTCB );
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 f85d 	bl	80082e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800722a:	e017      	b.n	800725c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007232:	2b01      	cmp	r3, #1
 8007234:	d103      	bne.n	800723e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f854 	bl	80082e4 <vPortFree>
	}
 800723c:	e00e      	b.n	800725c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007244:	2b02      	cmp	r3, #2
 8007246:	d009      	beq.n	800725c <prvDeleteTCB+0x54>
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e7fe      	b.n	800725a <prvDeleteTCB+0x52>
	}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800727c:	e008      	b.n	8007290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 800728e:	6013      	str	r3, [r2, #0]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20000b7c 	.word	0x20000b7c
 80072a0:	20000be4 	.word	0x20000be4

080072a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <xTaskGetSchedulerState+0x34>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072b2:	2301      	movs	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e008      	b.n	80072ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <xTaskGetSchedulerState+0x38>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c0:	2302      	movs	r3, #2
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	e001      	b.n	80072ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ca:	687b      	ldr	r3, [r7, #4]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000bd0 	.word	0x20000bd0
 80072dc:	20000bec 	.word	0x20000bec

080072e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d051      	beq.n	800739a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <xTaskPriorityInherit+0xc4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d241      	bcs.n	8007388 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db06      	blt.n	800731a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730c:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <xTaskPriorityInherit+0xc4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6959      	ldr	r1, [r3, #20]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <xTaskPriorityInherit+0xc8>)
 800732c:	4413      	add	r3, r2
 800732e:	4299      	cmp	r1, r3
 8007330:	d122      	bne.n	8007378 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f95a 	bl	80055f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <xTaskPriorityInherit+0xc4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <xTaskPriorityInherit+0xcc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d903      	bls.n	800735a <xTaskPriorityInherit+0x7a>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a15      	ldr	r2, [pc, #84]	; (80073ac <xTaskPriorityInherit+0xcc>)
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <xTaskPriorityInherit+0xc8>)
 8007368:	441a      	add	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fe f8e0 	bl	8005536 <vListInsertEnd>
 8007376:	e004      	b.n	8007382 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <xTaskPriorityInherit+0xc4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007382:	2301      	movs	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e008      	b.n	800739a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <xTaskPriorityInherit+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	429a      	cmp	r2, r3
 8007394:	d201      	bcs.n	800739a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800739a:	68fb      	ldr	r3, [r7, #12]
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	200006f0 	.word	0x200006f0
 80073a8:	200006f4 	.word	0x200006f4
 80073ac:	20000bcc 	.word	0x20000bcc

080073b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d054      	beq.n	8007470 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073c6:	4b2d      	ldr	r3, [pc, #180]	; (800747c <xTaskPriorityDisinherit+0xcc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d009      	beq.n	80073e4 <xTaskPriorityDisinherit+0x34>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e7fe      	b.n	80073e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <xTaskPriorityDisinherit+0x50>
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	e7fe      	b.n	80073fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	1e5a      	subs	r2, r3, #1
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007412:	429a      	cmp	r2, r3
 8007414:	d02c      	beq.n	8007470 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	2b00      	cmp	r3, #0
 800741c:	d128      	bne.n	8007470 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	3304      	adds	r3, #4
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe f8e4 	bl	80055f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <xTaskPriorityDisinherit+0xd0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d903      	bls.n	8007450 <xTaskPriorityDisinherit+0xa0>
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a0c      	ldr	r2, [pc, #48]	; (8007480 <xTaskPriorityDisinherit+0xd0>)
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a09      	ldr	r2, [pc, #36]	; (8007484 <xTaskPriorityDisinherit+0xd4>)
 800745e:	441a      	add	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe f865 	bl	8005536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007470:	697b      	ldr	r3, [r7, #20]
	}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	200006f0 	.word	0x200006f0
 8007480:	20000bcc 	.word	0x20000bcc
 8007484:	200006f4 	.word	0x200006f4

08007488 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d068      	beq.n	8007572 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e7fe      	b.n	80074ba <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d902      	bls.n	80074cc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	e002      	b.n	80074d2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d04a      	beq.n	8007572 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d145      	bne.n	8007572 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074e6:	4b25      	ldr	r3, [pc, #148]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d109      	bne.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60bb      	str	r3, [r7, #8]
 8007502:	e7fe      	b.n	8007502 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	db04      	blt.n	8007522 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	6959      	ldr	r1, [r3, #20]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4a13      	ldr	r2, [pc, #76]	; (8007580 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007532:	4413      	add	r3, r2
 8007534:	4299      	cmp	r1, r3
 8007536:	d11c      	bne.n	8007572 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	3304      	adds	r3, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe f857 	bl	80055f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d903      	bls.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a07      	ldr	r2, [pc, #28]	; (8007580 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007564:	441a      	add	r2, r3
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fd ffe2 	bl	8005536 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007572:	bf00      	nop
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	200006f0 	.word	0x200006f0
 8007580:	200006f4 	.word	0x200006f4
 8007584:	20000bcc 	.word	0x20000bcc

08007588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <pvTaskIncrementMutexHeldCount+0x24>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800759a:	3201      	adds	r2, #1
 800759c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800759e:	4b03      	ldr	r3, [pc, #12]	; (80075ac <pvTaskIncrementMutexHeldCount+0x24>)
 80075a0:	681b      	ldr	r3, [r3, #0]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	200006f0 	.word	0x200006f0

080075b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ba:	4b21      	ldr	r3, [pc, #132]	; (8007640 <prvAddCurrentTaskToDelayedList+0x90>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c0:	4b20      	ldr	r3, [pc, #128]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe f812 	bl	80055f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d10a      	bne.n	80075ea <prvAddCurrentTaskToDelayedList+0x3a>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4819      	ldr	r0, [pc, #100]	; (8007648 <prvAddCurrentTaskToDelayedList+0x98>)
 80075e4:	f7fd ffa7 	bl	8005536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e8:	e026      	b.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4413      	add	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d209      	bcs.n	8007616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7fd ffb5 	bl	800557e <vListInsert>
}
 8007614:	e010      	b.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007616:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fd ffab 	bl	800557e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	d202      	bcs.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007632:	4a08      	ldr	r2, [pc, #32]	; (8007654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6013      	str	r3, [r2, #0]
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000bc8 	.word	0x20000bc8
 8007644:	200006f0 	.word	0x200006f0
 8007648:	20000bb0 	.word	0x20000bb0
 800764c:	20000b80 	.word	0x20000b80
 8007650:	20000b7c 	.word	0x20000b7c
 8007654:	20000be4 	.word	0x20000be4

08007658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007662:	f000 faff 	bl	8007c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007666:	4b1c      	ldr	r3, [pc, #112]	; (80076d8 <xTimerCreateTimerTask+0x80>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d021      	beq.n	80076b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007676:	1d3a      	adds	r2, r7, #4
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	f107 030c 	add.w	r3, r7, #12
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd ff11 	bl	80054a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	2302      	movs	r3, #2
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	460a      	mov	r2, r1
 8007698:	4910      	ldr	r1, [pc, #64]	; (80076dc <xTimerCreateTimerTask+0x84>)
 800769a:	4811      	ldr	r0, [pc, #68]	; (80076e0 <xTimerCreateTimerTask+0x88>)
 800769c:	f7fe fffa 	bl	8006694 <xTaskCreateStatic>
 80076a0:	4602      	mov	r2, r0
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <xTimerCreateTimerTask+0x8c>)
 80076a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <xTimerCreateTimerTask+0x8c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <xTimerCreateTimerTask+0x74>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	e7fe      	b.n	80076ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80076cc:	697b      	ldr	r3, [r7, #20]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000c20 	.word	0x20000c20
 80076dc:	08008608 	.word	0x08008608
 80076e0:	08007819 	.word	0x08007819
 80076e4:	20000c24 	.word	0x20000c24

080076e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d109      	bne.n	8007714 <xTimerGenericCommand+0x2c>
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	623b      	str	r3, [r7, #32]
 8007712:	e7fe      	b.n	8007712 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007714:	4b19      	ldr	r3, [pc, #100]	; (800777c <xTimerGenericCommand+0x94>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d02a      	beq.n	8007772 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b05      	cmp	r3, #5
 800772c:	dc18      	bgt.n	8007760 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800772e:	f7ff fdb9 	bl	80072a4 <xTaskGetSchedulerState>
 8007732:	4603      	mov	r3, r0
 8007734:	2b02      	cmp	r3, #2
 8007736:	d109      	bne.n	800774c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <xTimerGenericCommand+0x94>)
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	f107 0110 	add.w	r1, r7, #16
 8007740:	2300      	movs	r3, #0
 8007742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007744:	f7fe f922 	bl	800598c <xQueueGenericSend>
 8007748:	6278      	str	r0, [r7, #36]	; 0x24
 800774a:	e012      	b.n	8007772 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <xTimerGenericCommand+0x94>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	f107 0110 	add.w	r1, r7, #16
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	f7fe f918 	bl	800598c <xQueueGenericSend>
 800775c:	6278      	str	r0, [r7, #36]	; 0x24
 800775e:	e008      	b.n	8007772 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <xTimerGenericCommand+0x94>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	f107 0110 	add.w	r1, r7, #16
 8007768:	2300      	movs	r3, #0
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	f7fe fa08 	bl	8005b80 <xQueueGenericSendFromISR>
 8007770:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007774:	4618      	mov	r0, r3
 8007776:	3728      	adds	r7, #40	; 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000c20 	.word	0x20000c20

08007780 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b22      	ldr	r3, [pc, #136]	; (8007814 <prvProcessExpiredTimer+0x94>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd ff29 	bl	80055f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d021      	beq.n	80077f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	18d1      	adds	r1, r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	f000 f8d1 	bl	8007960 <prvInsertTimerInActiveList>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01e      	beq.n	8007802 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077c4:	2300      	movs	r3, #0
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	2100      	movs	r1, #0
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff ff8a 	bl	80076e8 <xTimerGenericCommand>
 80077d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d112      	bne.n	8007802 <prvProcessExpiredTimer+0x82>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e7fe      	b.n	80077ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f6:	f023 0301 	bic.w	r3, r3, #1
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	6978      	ldr	r0, [r7, #20]
 8007808:	4798      	blx	r3
}
 800780a:	bf00      	nop
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000c18 	.word	0x20000c18

08007818 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007820:	f107 0308 	add.w	r3, r7, #8
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f857 	bl	80078d8 <prvGetNextExpireTime>
 800782a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4619      	mov	r1, r3
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f803 	bl	800783c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007836:	f000 f8d5 	bl	80079e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800783a:	e7f1      	b.n	8007820 <prvTimerTask+0x8>

0800783c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007846:	f7ff f95b 	bl	8006b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f866 	bl	8007920 <prvSampleTimeNow>
 8007854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d130      	bne.n	80078be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <prvProcessTimerOrBlockTask+0x3c>
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	429a      	cmp	r2, r3
 8007868:	d806      	bhi.n	8007878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800786a:	f7ff f957 	bl	8006b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff85 	bl	8007780 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007876:	e024      	b.n	80078c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d008      	beq.n	8007890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <prvProcessTimerOrBlockTask+0x90>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <prvProcessTimerOrBlockTask+0x50>
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <prvProcessTimerOrBlockTask+0x52>
 800788c:	2300      	movs	r3, #0
 800788e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <prvProcessTimerOrBlockTask+0x94>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4619      	mov	r1, r3
 800789e:	f7fe fec5 	bl	800662c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078a2:	f7ff f93b 	bl	8006b1c <xTaskResumeAll>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <prvProcessTimerOrBlockTask+0x98>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
}
 80078bc:	e001      	b.n	80078c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078be:	f7ff f92d 	bl	8006b1c <xTaskResumeAll>
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000c1c 	.word	0x20000c1c
 80078d0:	20000c20 	.word	0x20000c20
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <prvGetNextExpireTime+0x44>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <prvGetNextExpireTime+0x16>
 80078ea:	2201      	movs	r2, #1
 80078ec:	e000      	b.n	80078f0 <prvGetNextExpireTime+0x18>
 80078ee:	2200      	movs	r2, #0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <prvGetNextExpireTime+0x44>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	e001      	b.n	800790c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800790c:	68fb      	ldr	r3, [r7, #12]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000c18 	.word	0x20000c18

08007920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007928:	f7ff f994 	bl	8006c54 <xTaskGetTickCount>
 800792c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800792e:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvSampleTimeNow+0x3c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	429a      	cmp	r2, r3
 8007936:	d205      	bcs.n	8007944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007938:	f000 f930 	bl	8007b9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e002      	b.n	800794a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800794a:	4a04      	ldr	r2, [pc, #16]	; (800795c <prvSampleTimeNow+0x3c>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000c28 	.word	0x20000c28

08007960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d812      	bhi.n	80079ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e01b      	b.n	80079d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <prvInsertTimerInActiveList+0x7c>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fd fdea 	bl	800557e <vListInsert>
 80079aa:	e012      	b.n	80079d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d206      	bcs.n	80079c2 <prvInsertTimerInActiveList+0x62>
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d302      	bcc.n	80079c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	e007      	b.n	80079d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <prvInsertTimerInActiveList+0x80>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7fd fdd6 	bl	800557e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079d2:	697b      	ldr	r3, [r7, #20]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20000c1c 	.word	0x20000c1c
 80079e0:	20000c18 	.word	0x20000c18

080079e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ea:	e0c6      	b.n	8007b7a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da17      	bge.n	8007a22 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	3304      	adds	r3, #4
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <prvProcessReceivedCommands+0x2e>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	e7fe      	b.n	8007a10 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	6850      	ldr	r0, [r2, #4]
 8007a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1c:	6892      	ldr	r2, [r2, #8]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f2c0 80a7 	blt.w	8007b78 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd fdd8 	bl	80055f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a40:	463b      	mov	r3, r7
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff ff6c 	bl	8007920 <prvSampleTimeNow>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b09      	cmp	r3, #9
 8007a4e:	f200 8094 	bhi.w	8007b7a <prvProcessReceivedCommands+0x196>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <prvProcessReceivedCommands+0x74>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007af3 	.word	0x08007af3
 8007a68:	08007b07 	.word	0x08007b07
 8007a6c:	08007b4f 	.word	0x08007b4f
 8007a70:	08007a81 	.word	0x08007a81
 8007a74:	08007a81 	.word	0x08007a81
 8007a78:	08007af3 	.word	0x08007af3
 8007a7c:	08007b07 	.word	0x08007b07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a86:	f043 0301 	orr.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	18d1      	adds	r1, r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa0:	f7ff ff5e 	bl	8007960 <prvInsertTimerInActiveList>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d067      	beq.n	8007b7a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d05c      	beq.n	8007b7a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	441a      	add	r2, r3
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2300      	movs	r3, #0
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad2:	f7ff fe09 	bl	80076e8 <xTimerGenericCommand>
 8007ad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d14d      	bne.n	8007b7a <prvProcessReceivedCommands+0x196>
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e7fe      	b.n	8007af0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b04:	e039      	b.n	8007b7a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b0c:	f043 0301 	orr.w	r3, r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <prvProcessReceivedCommands+0x156>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e7fe      	b.n	8007b38 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	18d1      	adds	r1, r2, r3
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b48:	f7ff ff0a 	bl	8007960 <prvInsertTimerInActiveList>
					break;
 8007b4c:	e015      	b.n	8007b7a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b5e:	f000 fbc1 	bl	80082e4 <vPortFree>
 8007b62:	e00a      	b.n	8007b7a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6a:	f023 0301 	bic.w	r3, r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b76:	e000      	b.n	8007b7a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <prvProcessReceivedCommands+0x1b4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	1d39      	adds	r1, r7, #4
 8007b80:	2200      	movs	r2, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f91a 	bl	8005dbc <xQueueReceive>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f47f af2e 	bne.w	80079ec <prvProcessReceivedCommands+0x8>
	}
}
 8007b90:	bf00      	nop
 8007b92:	3730      	adds	r7, #48	; 0x30
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000c20 	.word	0x20000c20

08007b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ba2:	e047      	b.n	8007c34 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ba4:	4b2d      	ldr	r3, [pc, #180]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bae:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fd fd17 	bl	80055f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d02d      	beq.n	8007c34 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d90e      	bls.n	8007c08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7fd fcbc 	bl	800557e <vListInsert>
 8007c06:	e015      	b.n	8007c34 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff fd68 	bl	80076e8 <xTimerGenericCommand>
 8007c18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <prvSwitchTimerLists+0x98>
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	e7fe      	b.n	8007c32 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1b2      	bne.n	8007ba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <prvSwitchTimerLists+0xc4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <prvSwitchTimerLists+0xc0>)
 8007c4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvSwitchTimerLists+0xc4>)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000c18 	.word	0x20000c18
 8007c60:	20000c1c 	.word	0x20000c1c

08007c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c6a:	f000 f95f 	bl	8007f2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d120      	bne.n	8007cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c76:	4814      	ldr	r0, [pc, #80]	; (8007cc8 <prvCheckForValidListAndQueue+0x64>)
 8007c78:	f7fd fc30 	bl	80054dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c7c:	4813      	ldr	r0, [pc, #76]	; (8007ccc <prvCheckForValidListAndQueue+0x68>)
 8007c7e:	f7fd fc2d 	bl	80054dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <prvCheckForValidListAndQueue+0x6c>)
 8007c84:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <prvCheckForValidListAndQueue+0x64>)
 8007c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <prvCheckForValidListAndQueue+0x70>)
 8007c8a:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <prvCheckForValidListAndQueue+0x68>)
 8007c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <prvCheckForValidListAndQueue+0x74>)
 8007c94:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <prvCheckForValidListAndQueue+0x78>)
 8007c96:	2110      	movs	r1, #16
 8007c98:	200a      	movs	r0, #10
 8007c9a:	f7fd fd3b 	bl	8005714 <xQueueGenericCreateStatic>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007ca2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	490b      	ldr	r1, [pc, #44]	; (8007ce0 <prvCheckForValidListAndQueue+0x7c>)
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fc68 	bl	8006588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cb8:	f000 f966 	bl	8007f88 <vPortExitCritical>
}
 8007cbc:	bf00      	nop
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000c20 	.word	0x20000c20
 8007cc8:	20000bf0 	.word	0x20000bf0
 8007ccc:	20000c04 	.word	0x20000c04
 8007cd0:	20000c18 	.word	0x20000c18
 8007cd4:	20000c1c 	.word	0x20000c1c
 8007cd8:	20000ccc 	.word	0x20000ccc
 8007cdc:	20000c2c 	.word	0x20000c2c
 8007ce0:	08008610 	.word	0x08008610

08007ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d14:	4a0c      	ldr	r2, [pc, #48]	; (8007d48 <pxPortInitialiseStack+0x64>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3b14      	subs	r3, #20
 8007d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b04      	subs	r3, #4
 8007d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f06f 0202 	mvn.w	r2, #2
 8007d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3b20      	subs	r3, #32
 8007d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	08007d4d 	.word	0x08007d4d

08007d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d56:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <prvTaskExitError+0x50>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d009      	beq.n	8007d74 <prvTaskExitError+0x28>
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e7fe      	b.n	8007d72 <prvTaskExitError+0x26>
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d86:	bf00      	nop
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0fc      	beq.n	8007d88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	2000000c 	.word	0x2000000c

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	4770      	bx	lr
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007dc8:	4808      	ldr	r0, [pc, #32]	; (8007dec <prvPortStartFirstTask+0x24>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8814 	msr	CONTROL, r0
 8007dda:	b662      	cpsie	i
 8007ddc:	b661      	cpsie	f
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	df00      	svc	0
 8007de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dea:	bf00      	nop
 8007dec:	e000ed08 	.word	0xe000ed08

08007df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007df6:	4b44      	ldr	r3, [pc, #272]	; (8007f08 <xPortStartScheduler+0x118>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a44      	ldr	r2, [pc, #272]	; (8007f0c <xPortStartScheduler+0x11c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d109      	bne.n	8007e14 <xPortStartScheduler+0x24>
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	e7fe      	b.n	8007e12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e14:	4b3c      	ldr	r3, [pc, #240]	; (8007f08 <xPortStartScheduler+0x118>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <xPortStartScheduler+0x120>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d109      	bne.n	8007e32 <xPortStartScheduler+0x42>
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e7fe      	b.n	8007e30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e32:	4b38      	ldr	r3, [pc, #224]	; (8007f14 <xPortStartScheduler+0x124>)
 8007e34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	22ff      	movs	r2, #255	; 0xff
 8007e42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b30      	ldr	r3, [pc, #192]	; (8007f18 <xPortStartScheduler+0x128>)
 8007e58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e5a:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e5c:	2207      	movs	r2, #7
 8007e5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e60:	e009      	b.n	8007e76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d0ef      	beq.n	8007e62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e82:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1c3 0307 	rsb	r3, r3, #7
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d009      	beq.n	8007ea2 <xPortStartScheduler+0xb2>
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
 8007ea0:	e7fe      	b.n	8007ea0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ea2:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	4a1c      	ldr	r2, [pc, #112]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eac:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb4:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ec0:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007eca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ed2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ed6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed8:	f000 f8d6 	bl	8008088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007edc:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <xPortStartScheduler+0x134>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ee2:	f000 f8f5 	bl	80080d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <xPortStartScheduler+0x138>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <xPortStartScheduler+0x138>)
 8007eec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ef0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ef2:	f7ff ff69 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ef6:	f7fe ff75 	bl	8006de4 <vTaskSwitchContext>
	prvTaskExitError();
 8007efa:	f7ff ff27 	bl	8007d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed00 	.word	0xe000ed00
 8007f0c:	410fc271 	.word	0x410fc271
 8007f10:	410fc270 	.word	0x410fc270
 8007f14:	e000e400 	.word	0xe000e400
 8007f18:	20000d1c 	.word	0x20000d1c
 8007f1c:	20000d20 	.word	0x20000d20
 8007f20:	e000ed20 	.word	0xe000ed20
 8007f24:	2000000c 	.word	0x2000000c
 8007f28:	e000ef34 	.word	0xe000ef34

08007f2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d10e      	bne.n	8007f74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f56:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <vPortEnterCritical+0x58>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <vPortEnterCritical+0x48>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	e7fe      	b.n	8007f72 <vPortEnterCritical+0x46>
	}
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	2000000c 	.word	0x2000000c
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <vPortExitCritical+0x22>
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	607b      	str	r3, [r7, #4]
 8007fa8:	e7fe      	b.n	8007fa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <vPortExitCritical+0x3e>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000000c 	.word	0x2000000c
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe fee8 	bl	8006de4 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008060:	f7fe fe08 	bl	8006c74 <xTaskIncrementTick>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <SysTick_Handler+0x3c>)
 800806c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <vPortSetupTimerInterrupt+0x34>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x38>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <vPortSetupTimerInterrupt+0x3c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x40>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	099b      	lsrs	r3, r3, #6
 80080a4:	4a09      	ldr	r2, [pc, #36]	; (80080cc <vPortSetupTimerInterrupt+0x44>)
 80080a6:	3b01      	subs	r3, #1
 80080a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080aa:	4b04      	ldr	r3, [pc, #16]	; (80080bc <vPortSetupTimerInterrupt+0x34>)
 80080ac:	2207      	movs	r2, #7
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	e000e010 	.word	0xe000e010
 80080c0:	e000e018 	.word	0xe000e018
 80080c4:	20000000 	.word	0x20000000
 80080c8:	10624dd3 	.word	0x10624dd3
 80080cc:	e000e014 	.word	0xe000e014

080080d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e0 <vPortEnableVFP+0x10>
 80080d4:	6801      	ldr	r1, [r0, #0]
 80080d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080da:	6001      	str	r1, [r0, #0]
 80080dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080de:	bf00      	nop
 80080e0:	e000ed88 	.word	0xe000ed88

080080e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ea:	f3ef 8305 	mrs	r3, IPSR
 80080ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	d913      	bls.n	800811e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080f6:	4a16      	ldr	r2, [pc, #88]	; (8008150 <vPortValidateInterruptPriority+0x6c>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <vPortValidateInterruptPriority+0x70>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	7afa      	ldrb	r2, [r7, #11]
 8008106:	429a      	cmp	r2, r3
 8008108:	d209      	bcs.n	800811e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	607b      	str	r3, [r7, #4]
 800811c:	e7fe      	b.n	800811c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800811e:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <vPortValidateInterruptPriority+0x74>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <vPortValidateInterruptPriority+0x78>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d909      	bls.n	8008142 <vPortValidateInterruptPriority+0x5e>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	e7fe      	b.n	8008140 <vPortValidateInterruptPriority+0x5c>
	}
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e3f0 	.word	0xe000e3f0
 8008154:	20000d1c 	.word	0x20000d1c
 8008158:	e000ed0c 	.word	0xe000ed0c
 800815c:	20000d20 	.word	0x20000d20

08008160 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800816c:	f7fe fcc8 	bl	8006b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008170:	4b57      	ldr	r3, [pc, #348]	; (80082d0 <pvPortMalloc+0x170>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008178:	f000 f90c 	bl	8008394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800817c:	4b55      	ldr	r3, [pc, #340]	; (80082d4 <pvPortMalloc+0x174>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 808c 	bne.w	80082a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01c      	beq.n	80081ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d013      	beq.n	80081ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f023 0307 	bic.w	r3, r3, #7
 80081a8:	3308      	adds	r3, #8
 80081aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <pvPortMalloc+0x6a>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e7fe      	b.n	80081c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d068      	beq.n	80082a2 <pvPortMalloc+0x142>
 80081d0:	4b41      	ldr	r3, [pc, #260]	; (80082d8 <pvPortMalloc+0x178>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d863      	bhi.n	80082a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081da:	4b40      	ldr	r3, [pc, #256]	; (80082dc <pvPortMalloc+0x17c>)
 80081dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081de:	4b3f      	ldr	r3, [pc, #252]	; (80082dc <pvPortMalloc+0x17c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081e4:	e004      	b.n	80081f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <pvPortMalloc+0xa2>
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f1      	bne.n	80081e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008202:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <pvPortMalloc+0x170>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008208:	429a      	cmp	r2, r3
 800820a:	d04a      	beq.n	80082a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	4413      	add	r3, r2
 8008214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad2      	subs	r2, r2, r3
 8008226:	2308      	movs	r3, #8
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	d91e      	bls.n	800826c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <pvPortMalloc+0xf4>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	e7fe      	b.n	8008252 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008266:	69b8      	ldr	r0, [r7, #24]
 8008268:	f000 f8f6 	bl	8008458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <pvPortMalloc+0x178>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <pvPortMalloc+0x178>)
 8008278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800827a:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <pvPortMalloc+0x178>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <pvPortMalloc+0x180>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d203      	bcs.n	800828e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <pvPortMalloc+0x178>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <pvPortMalloc+0x180>)
 800828c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <pvPortMalloc+0x174>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	431a      	orrs	r2, r3
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082a2:	f7fe fc3b 	bl	8006b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <pvPortMalloc+0x164>
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e7fe      	b.n	80082c2 <pvPortMalloc+0x162>
	return pvReturn;
 80082c4:	69fb      	ldr	r3, [r7, #28]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3728      	adds	r7, #40	; 0x28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200018e4 	.word	0x200018e4
 80082d4:	200018f0 	.word	0x200018f0
 80082d8:	200018e8 	.word	0x200018e8
 80082dc:	200018dc 	.word	0x200018dc
 80082e0:	200018ec 	.word	0x200018ec

080082e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d046      	beq.n	8008384 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082f6:	2308      	movs	r3, #8
 80082f8:	425b      	negs	r3, r3
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	4b20      	ldr	r3, [pc, #128]	; (800838c <vPortFree+0xa8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4013      	ands	r3, r2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <vPortFree+0x42>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e7fe      	b.n	8008324 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <vPortFree+0x5e>
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	e7fe      	b.n	8008340 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <vPortFree+0xa8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d019      	beq.n	8008384 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d115      	bne.n	8008384 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <vPortFree+0xa8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	43db      	mvns	r3, r3
 8008362:	401a      	ands	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008368:	f7fe fbca 	bl	8006b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <vPortFree+0xac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4413      	add	r3, r2
 8008376:	4a06      	ldr	r2, [pc, #24]	; (8008390 <vPortFree+0xac>)
 8008378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f000 f86c 	bl	8008458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008380:	f7fe fbcc 	bl	8006b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008384:	bf00      	nop
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	200018f0 	.word	0x200018f0
 8008390:	200018e8 	.word	0x200018e8

08008394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800839a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800839e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <prvHeapInit+0xac>)
 80083a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00c      	beq.n	80083c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0307 	bic.w	r3, r3, #7
 80083ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	4a1f      	ldr	r2, [pc, #124]	; (8008440 <prvHeapInit+0xac>)
 80083c4:	4413      	add	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083cc:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <prvHeapInit+0xb0>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083d2:	4b1c      	ldr	r3, [pc, #112]	; (8008444 <prvHeapInit+0xb0>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083e0:	2208      	movs	r2, #8
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0307 	bic.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <prvHeapInit+0xb4>)
 80083f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <prvHeapInit+0xb4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <prvHeapInit+0xb4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <prvHeapInit+0xb4>)
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <prvHeapInit+0xb8>)
 8008422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <prvHeapInit+0xbc>)
 800842a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <prvHeapInit+0xc0>)
 800842e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	20000d24 	.word	0x20000d24
 8008444:	200018dc 	.word	0x200018dc
 8008448:	200018e4 	.word	0x200018e4
 800844c:	200018ec 	.word	0x200018ec
 8008450:	200018e8 	.word	0x200018e8
 8008454:	200018f0 	.word	0x200018f0

08008458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008460:	4b28      	ldr	r3, [pc, #160]	; (8008504 <prvInsertBlockIntoFreeList+0xac>)
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e002      	b.n	800846c <prvInsertBlockIntoFreeList+0x14>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d8f7      	bhi.n	8008466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	4413      	add	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d108      	bne.n	800849a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	441a      	add	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	441a      	add	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d118      	bne.n	80084e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <prvInsertBlockIntoFreeList+0xb0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d00d      	beq.n	80084d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	441a      	add	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e008      	b.n	80084e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <prvInsertBlockIntoFreeList+0xb0>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e003      	b.n	80084e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d002      	beq.n	80084f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	200018dc 	.word	0x200018dc
 8008508:	200018e4 	.word	0x200018e4

0800850c <__libc_init_array>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4e0d      	ldr	r6, [pc, #52]	; (8008544 <__libc_init_array+0x38>)
 8008510:	4c0d      	ldr	r4, [pc, #52]	; (8008548 <__libc_init_array+0x3c>)
 8008512:	1ba4      	subs	r4, r4, r6
 8008514:	10a4      	asrs	r4, r4, #2
 8008516:	2500      	movs	r5, #0
 8008518:	42a5      	cmp	r5, r4
 800851a:	d109      	bne.n	8008530 <__libc_init_array+0x24>
 800851c:	4e0b      	ldr	r6, [pc, #44]	; (800854c <__libc_init_array+0x40>)
 800851e:	4c0c      	ldr	r4, [pc, #48]	; (8008550 <__libc_init_array+0x44>)
 8008520:	f000 f82c 	bl	800857c <_init>
 8008524:	1ba4      	subs	r4, r4, r6
 8008526:	10a4      	asrs	r4, r4, #2
 8008528:	2500      	movs	r5, #0
 800852a:	42a5      	cmp	r5, r4
 800852c:	d105      	bne.n	800853a <__libc_init_array+0x2e>
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008534:	4798      	blx	r3
 8008536:	3501      	adds	r5, #1
 8008538:	e7ee      	b.n	8008518 <__libc_init_array+0xc>
 800853a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800853e:	4798      	blx	r3
 8008540:	3501      	adds	r5, #1
 8008542:	e7f2      	b.n	800852a <__libc_init_array+0x1e>
 8008544:	080086fc 	.word	0x080086fc
 8008548:	080086fc 	.word	0x080086fc
 800854c:	080086fc 	.word	0x080086fc
 8008550:	08008700 	.word	0x08008700

08008554 <memcpy>:
 8008554:	b510      	push	{r4, lr}
 8008556:	1e43      	subs	r3, r0, #1
 8008558:	440a      	add	r2, r1
 800855a:	4291      	cmp	r1, r2
 800855c:	d100      	bne.n	8008560 <memcpy+0xc>
 800855e:	bd10      	pop	{r4, pc}
 8008560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008568:	e7f7      	b.n	800855a <memcpy+0x6>

0800856a <memset>:
 800856a:	4402      	add	r2, r0
 800856c:	4603      	mov	r3, r0
 800856e:	4293      	cmp	r3, r2
 8008570:	d100      	bne.n	8008574 <memset+0xa>
 8008572:	4770      	bx	lr
 8008574:	f803 1b01 	strb.w	r1, [r3], #1
 8008578:	e7f9      	b.n	800856e <memset+0x4>
	...

0800857c <_init>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr

08008588 <_fini>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr
